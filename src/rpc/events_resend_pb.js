// source: events_resend.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.rpc.EventsResendRequest', null, global);
goog.exportSymbol('proto.rpc.EventsResendResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.EventsResendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rpc.EventsResendRequest.repeatedFields_, null);
};
goog.inherits(proto.rpc.EventsResendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.EventsResendRequest.displayName = 'proto.rpc.EventsResendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpc.EventsResendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rpc.EventsResendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rpc.EventsResendResponse.displayName = 'proto.rpc.EventsResendResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpc.EventsResendRequest.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.EventsResendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.EventsResendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.EventsResendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.EventsResendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    account: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    expandList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    idempotency: jspb.Message.getFieldWithDefault(msg, 5, ""),
    live: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    stripeAccount: jspb.Message.getFieldWithDefault(msg, 7, ""),
    version: jspb.Message.getFieldWithDefault(msg, 8, ""),
    webhookEndpoint: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.EventsResendRequest}
 */
proto.rpc.EventsResendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.EventsResendRequest;
  return proto.rpc.EventsResendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.EventsResendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.EventsResendRequest}
 */
proto.rpc.EventsResendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addExpand(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdempotency(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLive(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStripeAccount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebhookEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.EventsResendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.EventsResendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.EventsResendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.EventsResendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getExpandList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getIdempotency();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getStripeAccount();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getWebhookEndpoint();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string event_id = 1;
 * @return {string}
 */
proto.rpc.EventsResendRequest.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account = 2;
 * @return {string}
 */
proto.rpc.EventsResendRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string data = 3;
 * @return {!Array<string>}
 */
proto.rpc.EventsResendRequest.prototype.getDataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated string expand = 4;
 * @return {!Array<string>}
 */
proto.rpc.EventsResendRequest.prototype.getExpandList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setExpandList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.addExpand = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.clearExpandList = function() {
  return this.setExpandList([]);
};


/**
 * optional string idempotency = 5;
 * @return {string}
 */
proto.rpc.EventsResendRequest.prototype.getIdempotency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setIdempotency = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool live = 6;
 * @return {boolean}
 */
proto.rpc.EventsResendRequest.prototype.getLive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setLive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string stripe_account = 7;
 * @return {string}
 */
proto.rpc.EventsResendRequest.prototype.getStripeAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setStripeAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string version = 8;
 * @return {string}
 */
proto.rpc.EventsResendRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string webhook_endpoint = 9;
 * @return {string}
 */
proto.rpc.EventsResendRequest.prototype.getWebhookEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.rpc.EventsResendRequest} returns this
 */
proto.rpc.EventsResendRequest.prototype.setWebhookEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rpc.EventsResendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.rpc.EventsResendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rpc.EventsResendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.EventsResendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stripeEvent: (f = msg.getStripeEvent()) && common_pb.StripeEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpc.EventsResendResponse}
 */
proto.rpc.EventsResendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rpc.EventsResendResponse;
  return proto.rpc.EventsResendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpc.EventsResendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpc.EventsResendResponse}
 */
proto.rpc.EventsResendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.StripeEvent;
      reader.readMessage(value,common_pb.StripeEvent.deserializeBinaryFromReader);
      msg.setStripeEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpc.EventsResendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rpc.EventsResendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpc.EventsResendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpc.EventsResendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStripeEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.StripeEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional StripeEvent stripe_event = 1;
 * @return {?proto.rpc.StripeEvent}
 */
proto.rpc.EventsResendResponse.prototype.getStripeEvent = function() {
  return /** @type{?proto.rpc.StripeEvent} */ (
    jspb.Message.getWrapperField(this, common_pb.StripeEvent, 1));
};


/**
 * @param {?proto.rpc.StripeEvent|undefined} value
 * @return {!proto.rpc.EventsResendResponse} returns this
*/
proto.rpc.EventsResendResponse.prototype.setStripeEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rpc.EventsResendResponse} returns this
 */
proto.rpc.EventsResendResponse.prototype.clearStripeEvent = function() {
  return this.setStripeEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpc.EventsResendResponse.prototype.hasStripeEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.rpc);

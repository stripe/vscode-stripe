{
  "Create Bank Account": {
    "prefix": "StripeBankAccountCreate",
    "description": "Create Bank Account",
    "body": "const bankAccount = await stripe.accounts.createExternalAccount(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {external_account: '${2:btok_xxxxxxxxxxxxx}'}\n)"
  },
  "Delete Bank Account": {
    "prefix": "StripeBankAccountDelete",
    "description": "Delete Bank Account",
    "body": "const deleted = await stripe.accounts.deleteExternalAccount(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:ba_xxxxxxxxxxxxx}'\n)"
  },
  "List Bank Account": {
    "prefix": "StripeBankAccountList",
    "description": "List Bank Account",
    "body": "const accountBankAccounts = await stripe.accounts.listExternalAccounts(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {object: '${2:bank_account}', limit: ${3:3}}\n)"
  },
  "Retrieve Bank Account": {
    "prefix": "StripeBankAccountRetrieve",
    "description": "Retrieve Bank Account",
    "body": "const bankAccount = await stripe.accounts.retrieveExternalAccount(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:ba_xxxxxxxxxxxxx}'\n)"
  },
  "Update Bank Account": {
    "prefix": "StripeBankAccountUpdate",
    "description": "Update Bank Account",
    "body": "const bankAccount = await stripe.accounts.updateExternalAccount(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:ba_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${3:6735}'}}\n)"
  },
  "Create Account Account Card": {
    "prefix": "StripeAccountAccountCardCreate",
    "description": "Create Account Account Card",
    "body": "const card = await stripe.accounts.createExternalAccount(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {external_account: '${2:tok_xxxx_debit}'}\n)"
  },
  "Delete Account Account Card": {
    "prefix": "StripeAccountAccountCardDelete",
    "description": "Delete Account Account Card",
    "body": "const deleted = await stripe.accounts.deleteExternalAccount(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:card_xxxxxxxxxxxxx}'\n)"
  },
  "List Account Account Card": {
    "prefix": "StripeAccountAccountCardList",
    "description": "List Account Account Card",
    "body": "const accountCards = await stripe.accounts.listExternalAccounts(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {object: '${2:card}', limit: ${3:3}}\n)"
  },
  "Retrieve Account Account Card": {
    "prefix": "StripeAccountAccountCardRetrieve",
    "description": "Retrieve Account Account Card",
    "body": "const card = await stripe.accounts.retrieveExternalAccount(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:card_xxxxxxxxxxxxx}'\n)"
  },
  "Update Account Account Card": {
    "prefix": "StripeAccountAccountCardUpdate",
    "description": "Update Account Account Card",
    "body": "const card = await stripe.accounts.updateExternalAccount(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:card_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${3:6735}'}}\n)"
  },
  "List Account Capability": {
    "prefix": "StripeAccountCapabilityList",
    "description": "List Account Capability",
    "body": "const capabilities = await stripe.accounts.listCapabilities(\n  '${1:acct_xxxxxxxxxxxxx}'\n)"
  },
  "Retrieve Account Capability": {
    "prefix": "StripeAccountCapabilityRetrieve",
    "description": "Retrieve Account Capability",
    "body": "const capability = await stripe.accounts.retrieveCapability(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:card_payments}'\n)"
  },
  "Update Account Capability": {
    "prefix": "StripeAccountCapabilityUpdate",
    "description": "Update Account Capability",
    "body": "const capability = await stripe.accounts.updateCapability(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:card_payments}',\n  {requested: ${3:true}}\n)"
  },
  "Create Account": {
    "prefix": "StripeAccountCreate",
    "description": "Create Account",
    "body": "const account = await stripe.accounts.create({\n  type: '${1:custom}',\n  country: '${2:US}',\n  email: '${3:jenny.rosen@example.com}',\n  capabilities: {\n    card_payments: {requested: ${4:${5:true}}},\n    transfers: {requested: true},\n  },\n})"
  },
  "Delete Account": {
    "prefix": "StripeAccountDelete",
    "description": "Delete Account",
    "body": "const deleted = await stripe.accounts.del(\n  '${1:acct_xxxxxxxxxxxxx}'\n)"
  },
  "Create Account Link": {
    "prefix": "StripeAccountLinkCreate",
    "description": "Create Account Link",
    "body": "const accountLink = await stripe.accountLinks.create({\n  account: '${1:acct_xxxxxxxxxxxxx}',\n  refresh_url: '${2:https://example.com/reauth}',\n  return_url: '${3:https://example.com/return}',\n  type: '${4:account_onboarding}',\n})"
  },
  "List Account": {
    "prefix": "StripeAccountList",
    "description": "List Account",
    "body": "const accounts = await stripe.accounts.list({\n  limit: ${1:3},\n})"
  },
  "Create Account Login Link": {
    "prefix": "StripeAccountLoginLinkCreate",
    "description": "Create Account Login Link",
    "body": "const loginLink = await stripe.accounts.createLoginLink(\n  '${1:acct_xxxxxxxxxxxxx}'\n)"
  },
  "Create Account Person": {
    "prefix": "StripeAccountPersonCreate",
    "description": "Create Account Person",
    "body": "const person = await stripe.accounts.createPerson(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {first_name: '${2:Jane}', last_name: '${3:Diaz}'}\n)"
  },
  "Delete Account Person": {
    "prefix": "StripeAccountPersonDelete",
    "description": "Delete Account Person",
    "body": "const deleted = await stripe.accounts.deletePerson(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:person_xxxxxxxxxxxxx}'\n)"
  },
  "List Account Person": {
    "prefix": "StripeAccountPersonList",
    "description": "List Account Person",
    "body": "const persons = await stripe.accounts.listPersons(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {limit: ${2:3}}\n)"
  },
  "Retrieve Account Person": {
    "prefix": "StripeAccountPersonRetrieve",
    "description": "Retrieve Account Person",
    "body": "const person = await stripe.accounts.retrievePerson(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:person_xxxxxxxxxxxxx}'\n)"
  },
  "Update Account Person": {
    "prefix": "StripeAccountPersonUpdate",
    "description": "Update Account Person",
    "body": "const person = await stripe.accounts.updatePerson(\n  '${2:acct_xxxxxxxxxxxxx}',\n  '${1:person_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${3:6735}'}}\n)"
  },
  "Reject Account": {
    "prefix": "StripeAccountReject",
    "description": "Reject Account",
    "body": "const account = await stripe.accounts.reject(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {reason: '${2:fraud}'}\n)"
  },
  "Retrieve Account": {
    "prefix": "StripeAccountRetrieve",
    "description": "Retrieve Account",
    "body": "const account = await stripe.accounts.retrieve(\n  '${1:acct_xxxxxxxxxxxxx}'\n)"
  },
  "Update Account": {
    "prefix": "StripeAccountUpdate",
    "description": "Update Account",
    "body": "const account = await stripe.accounts.update(\n  '${1:acct_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundCreate",
    "description": "Create Application Fee Fee Refund",
    "body": "const feeRefund = await stripe.applicationFees.createRefund(\n  '${1:fee_xxxxxxxxxxxxx}'\n)"
  },
  "List Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundList",
    "description": "List Application Fee Fee Refund",
    "body": "const feeRefunds = await stripe.applicationFees.listRefunds(\n  '${1:fee_xxxxxxxxxxxxx}',\n  {limit: ${2:3}}\n)"
  },
  "Retrieve Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundRetrieve",
    "description": "Retrieve Application Fee Fee Refund",
    "body": "const feeRefund = await stripe.applicationFees.retrieveRefund(\n  '${2:fee_xxxxxxxxxxxxx}',\n  '${1:fr_xxxxxxxxxxxxx}'\n)"
  },
  "Update Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundUpdate",
    "description": "Update Application Fee Fee Refund",
    "body": "const feeRefund = await stripe.applicationFees.updateRefund(\n  '${2:fee_xxxxxxxxxxxxx}',\n  '${1:fr_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${3:6735}'}}\n)"
  },
  "List Application Fee": {
    "prefix": "StripeApplicationFeeList",
    "description": "List Application Fee",
    "body": "const applicationFees = await stripe.applicationFees.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Application Fee": {
    "prefix": "StripeApplicationFeeRetrieve",
    "description": "Retrieve Application Fee",
    "body": "const applicationFee = await stripe.applicationFees.retrieve(\n  '${1:fee_xxxxxxxxxxxxx}'\n)"
  },
  "Retrieve Balance": {
    "prefix": "StripeBalanceRetrieve",
    "description": "Retrieve Balance",
    "body": "stripe.balance.retrieve(function(err, balance) {\n  // asynchronously called\n});\n\n"
  },
  "List Balance Transaction": {
    "prefix": "StripeBalanceTransactionList",
    "description": "List Balance Transaction",
    "body": "const balanceTransactions = await stripe.balanceTransactions.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Balance Transaction": {
    "prefix": "StripeBalanceTransactionRetrieve",
    "description": "Retrieve Balance Transaction",
    "body": "const balanceTransaction = await stripe.balanceTransactions.retrieve(\n  '${1:txn_xxxxxxxxxxxxx}'\n)"
  },
  "Create Billing Portal Configuration": {
    "prefix": "StripeBillingPortalConfigurationCreate",
    "description": "Create Billing Portal Configuration",
    "body": "const configuration = await stripe.billingPortal.configurations.create({\n  features: {\n    customer_update: {\n      allowed_updates: ['${1:email}', '${2:tax_id}'],\n      enabled: ${3:${4:true}},\n    },\n    invoice_history: {enabled: true},\n  },\n  business_profile: {\n    privacy_policy_url: '${5:https://example.com/privacy}',\n    terms_of_service_url: '${6:https://example.com/terms}',\n  },\n})"
  },
  "List Billing Portal Configuration": {
    "prefix": "StripeBillingPortalConfigurationList",
    "description": "List Billing Portal Configuration",
    "body": "const configurations = await stripe.billingPortal.configurations.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Billing Portal Configuration": {
    "prefix": "StripeBillingPortalConfigurationRetrieve",
    "description": "Retrieve Billing Portal Configuration",
    "body": "const configuration = await stripe.billingPortal.configurations.retrieve(\n  '${1:bpc_xxxxxxxxxxxxx}'\n)"
  },
  "Update Billing Portal Configuration": {
    "prefix": "StripeBillingPortalConfigurationUpdate",
    "description": "Update Billing Portal Configuration",
    "body": "const configuration = await stripe.billingPortal.configurations.update(\n  '${1:bpc_xxxxxxxxxxxxx}',\n  {\n    business_profile: {\n      privacy_policy_url: '${2:https://example.com/privacy}',\n      terms_of_service_url: '${3:https://example.com/terms}',\n    },\n  }\n)"
  },
  "Create Billing Portal Session": {
    "prefix": "StripeBillingPortalSessionCreate",
    "description": "Create Billing Portal Session",
    "body": "const session = await stripe.billingPortal.sessions.create({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n  return_url: '${2:https://example.com/account}',\n})"
  },
  "Capture Charge": {
    "prefix": "StripeChargeCapture",
    "description": "Capture Charge",
    "body": "const charge = await stripe.charges.capture(\n  '${1:ch_xxxxxxxxxxxxx}'\n)"
  },
  "Create Charge": {
    "prefix": "StripeChargeCreate",
    "description": "Create Charge",
    "body": "// `source` is obtained with Stripe.js; see https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token\nconst charge = await stripe.charges.create({\n  amount: ${1:2000},\n  currency: '${2:usd}',\n  source: '${3:tok_xxxx}',\n  description: '${4:My First Test Charge (created for API docs)}',\n})"
  },
  "List Charge": {
    "prefix": "StripeChargeList",
    "description": "List Charge",
    "body": "const charges = await stripe.charges.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Charge": {
    "prefix": "StripeChargeRetrieve",
    "description": "Retrieve Charge",
    "body": "const charge = await stripe.charges.retrieve(\n  '${1:ch_xxxxxxxxxxxxx}'\n)"
  },
  "Update Charge": {
    "prefix": "StripeChargeUpdate",
    "description": "Update Charge",
    "body": "const charge = await stripe.charges.update(\n  '${1:ch_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Checkout Session": {
    "prefix": "StripeCheckoutSessionCreate",
    "description": "Create Checkout Session",
    "body": "const session = await stripe.checkout.sessions.create({\n  success_url: '${1:https://example.com/success}',\n  cancel_url: '${2:https://example.com/cancel}',\n  payment_method_types: ['${3:card}'],\n  line_items: [\n    {price: '${4:price_xxxxxxxxxxxxx}', quantity: ${5:2}},\n  ],\n  mode: '${6:payment}',\n})"
  },
  "Retrieve Checkout Session Line Items": {
    "prefix": "StripeCheckoutSessionLineItemsRetrieve",
    "description": "Retrieve Checkout Session Line Items",
    "body": "stripe.checkout.sessions.listLineItems(\n  '${1:cs_test_xxxxxxxxxxxxx}',\n  { limit: ${2:5} },\n  function(err, lineItems) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "List Checkout Session": {
    "prefix": "StripeCheckoutSessionList",
    "description": "List Checkout Session",
    "body": "const sessions = await stripe.checkout.sessions.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Checkout Session": {
    "prefix": "StripeCheckoutSessionRetrieve",
    "description": "Retrieve Checkout Session",
    "body": "const session = await stripe.checkout.sessions.retrieve(\n  '${1:cs_test_xxxxxxxxxxxxx}'\n)"
  },
  "List Country Spec": {
    "prefix": "StripeCountrySpecList",
    "description": "List Country Spec",
    "body": "const countrySpecs = await stripe.countrySpecs.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Country Spec": {
    "prefix": "StripeCountrySpecRetrieve",
    "description": "Retrieve Country Spec",
    "body": "const countrySpec = await stripe.countrySpecs.retrieve(\n  '${1:US}'\n)"
  },
  "Create Coupon": {
    "prefix": "StripeCouponCreate",
    "description": "Create Coupon",
    "body": "const coupon = await stripe.coupons.create({\n  percent_off: ${1:25},\n  duration: '${2:repeating}',\n  duration_in_months: ${3:3},\n})"
  },
  "Delete Coupon": {
    "prefix": "StripeCouponDelete",
    "description": "Delete Coupon",
    "body": "const deleted = await stripe.coupons.del(\n  '${1:co_xxxxxxxxxxxxx}'\n)"
  },
  "List Coupon": {
    "prefix": "StripeCouponList",
    "description": "List Coupon",
    "body": "const coupons = await stripe.coupons.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Coupon": {
    "prefix": "StripeCouponRetrieve",
    "description": "Retrieve Coupon",
    "body": "const coupon = await stripe.coupons.retrieve(\n  '${1:25_5OFF}'\n)"
  },
  "Update Coupon": {
    "prefix": "StripeCouponUpdate",
    "description": "Update Coupon",
    "body": "const coupon = await stripe.coupons.update(\n  '${1:co_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Credit Note": {
    "prefix": "StripeCreditNoteCreate",
    "description": "Create Credit Note",
    "body": "const creditNote = await stripe.creditNotes.create({\n  invoice: '${1:in_xxxxxxxxxxxxx}',\n  lines: [\n    {\n      type: '${2:invoice_line_item}',\n      invoice_line_item: '${3:il_xxxxxxxxxxxxx}',\n      quantity: ${4:1},\n    },\n  ],\n})"
  },
  "List Credit Note Line Item": {
    "prefix": "StripeCreditNoteLineItemList",
    "description": "List Credit Note Line Item",
    "body": "const lineItems = await stripe.creditNotes.listLineItems(\n  '${1:cn_xxxxxxxxxxxxx}',\n  {limit: ${2:3}}\n)"
  },
  "Preview Credit Note Lines": {
    "prefix": "StripeCreditNoteLinesPreview",
    "description": "Preview Credit Note Lines",
    "body": "stripe.creditNotes.listPreviewLineItems(\n  {\n    invoice: '${1:in_xxxxxxxxxxxxx}',\n    lines: [\n      {\n        type: 'invoice_line_item',\n        invoice_line_item: '${2:il_xxxxxxxxxxxxx}',\n        quantity: '1',\n      },\n    ],\n  },\n  function(err, lineItems) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "List Credit Note": {
    "prefix": "StripeCreditNoteList",
    "description": "List Credit Note",
    "body": "const creditNotes = await stripe.creditNotes.list({\n  limit: ${1:3},\n})"
  },
  "Preview Credit Note": {
    "prefix": "StripeCreditNotePreview",
    "description": "Preview Credit Note",
    "body": "const creditNote = await stripe.creditNotes.preview({\n  invoice: '${1:in_xxxxxxxxxxxxx}',\n  lines: [\n    {\n      type: '${2:invoice_line_item}',\n      invoice_line_item: '${3:il_xxxxxxxxxxxxx}',\n      quantity: ${4:1},\n    },\n  ],\n})"
  },
  "Retrieve Credit Note": {
    "prefix": "StripeCreditNoteRetrieve",
    "description": "Retrieve Credit Note",
    "body": "const creditNote = await stripe.creditNotes.retrieve(\n  '${1:cn_xxxxxxxxxxxxx}'\n)"
  },
  "Update Credit Note": {
    "prefix": "StripeCreditNoteUpdate",
    "description": "Update Credit Note",
    "body": "const creditNote = await stripe.creditNotes.update(\n  '${1:cn_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Void Credit Note Credit Note": {
    "prefix": "StripeCreditNoteVoidCreditNote",
    "description": "Void Credit Note Credit Note",
    "body": "const creditNote = await stripe.creditNotes.voidCreditNote(\n  '${1:cn_xxxxxxxxxxxxx}'\n)"
  },
  "Create Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionCreate",
    "description": "Create Customer Balance Transaction",
    "body": "const balanceTransaction = await stripe.customers.createBalanceTransaction(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {amount: ${2:-500}, currency: '${3:usd}'}\n)"
  },
  "List Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionList",
    "description": "List Customer Balance Transaction",
    "body": "const balanceTransactions = await stripe.customers.listBalanceTransactions(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {limit: ${2:3}}\n)"
  },
  "Retrieve Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionRetrieve",
    "description": "Retrieve Customer Balance Transaction",
    "body": "const balanceTransaction = await stripe.customers.retrieveBalanceTransaction(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:cbtxn_xxxxxxxxxxxxx}'\n)"
  },
  "Update Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionUpdate",
    "description": "Update Customer Balance Transaction",
    "body": "const balanceTransaction = await stripe.customers.updateBalanceTransaction(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:cbtxn_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${3:6735}'}}\n)"
  },
  "Create Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountCreate",
    "description": "Create Customer Bank Account",
    "body": "const bankAccount = await stripe.customers.createSource(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {source: '${2:btok_xxxxxxxxxxxxx}'}\n)"
  },
  "Delete Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountDelete",
    "description": "Delete Customer Bank Account",
    "body": "const deleted = await stripe.customers.deleteSource(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:ba_xxxxxxxxxxxxx}'\n)"
  },
  "List Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountList",
    "description": "List Customer Bank Account",
    "body": "const bankAccounts = await stripe.customers.listSources(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {object: '${2:bank_account}', limit: ${3:3}}\n)"
  },
  "Retrieve Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountRetrieve",
    "description": "Retrieve Customer Bank Account",
    "body": "const bankAccount = await stripe.customers.retrieveSource(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:ba_xxxxxxxxxxxxx}'\n)"
  },
  "Update Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountUpdate",
    "description": "Update Customer Bank Account",
    "body": "const bankAccount = await stripe.customers.updateSource(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:ba_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${3:6735}'}}\n)"
  },
  "Verify Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountVerify",
    "description": "Verify Customer Bank Account",
    "body": "const bankAccount = await stripe.customers.verifySource(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:ba_xxxxxxxxxxxxx}',\n  {amounts: [${3:32}, ${4:45}]}\n)"
  },
  "Create Customer Card": {
    "prefix": "StripeCustomerCardCreate",
    "description": "Create Customer Card",
    "body": "const card = await stripe.customers.createSource(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {source: '${2:tok_xxxx}'}\n)"
  },
  "Delete Customer Card": {
    "prefix": "StripeCustomerCardDelete",
    "description": "Delete Customer Card",
    "body": "const deleted = await stripe.customers.deleteSource(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:card_xxxxxxxxxxxxx}'\n)"
  },
  "List Customer Card": {
    "prefix": "StripeCustomerCardList",
    "description": "List Customer Card",
    "body": "const cards = await stripe.customers.listSources(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {object: '${2:card}', limit: ${3:3}}\n)"
  },
  "Retrieve Customer Card": {
    "prefix": "StripeCustomerCardRetrieve",
    "description": "Retrieve Customer Card",
    "body": "const card = await stripe.customers.retrieveSource(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:card_xxxxxxxxxxxxx}'\n)"
  },
  "Update Customer Card": {
    "prefix": "StripeCustomerCardUpdate",
    "description": "Update Customer Card",
    "body": "const card = await stripe.customers.updateSource(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:card_xxxxxxxxxxxxx}',\n  {name: '${3:Jenny Rosen}'}\n)"
  },
  "Create Customer": {
    "prefix": "StripeCustomerCreate",
    "description": "Create Customer",
    "body": "const customer = await stripe.customers.create({\n  description: '${1:My First Test Customer (created for API docs)}',\n})"
  },
  "Delete Customer": {
    "prefix": "StripeCustomerDelete",
    "description": "Delete Customer",
    "body": "const deleted = await stripe.customers.del(\n  '${1:cus_xxxxxxxxxxxxx}'\n)"
  },
  "List Customer": {
    "prefix": "StripeCustomerList",
    "description": "List Customer",
    "body": "const customers = await stripe.customers.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Customer": {
    "prefix": "StripeCustomerRetrieve",
    "description": "Retrieve Customer",
    "body": "const customer = await stripe.customers.retrieve(\n  '${1:cus_xxxxxxxxxxxxx}'\n)"
  },
  "Create Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdCreate",
    "description": "Create Customer Tax Id",
    "body": "const taxId = await stripe.customers.createTaxId(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {type: '${2:eu_vat}', value: '${3:DE123456789}'}\n)"
  },
  "Delete Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdDelete",
    "description": "Delete Customer Tax Id",
    "body": "const deleted = await stripe.customers.deleteTaxId(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:txi_xxxxxxxxxxxxx}'\n)"
  },
  "List Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdList",
    "description": "List Customer Tax Id",
    "body": "const taxIds = await stripe.customers.listTaxIds(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {limit: ${2:3}}\n)"
  },
  "Retrieve Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdRetrieve",
    "description": "Retrieve Customer Tax Id",
    "body": "const taxId = await stripe.customers.retrieveTaxId(\n  '${2:cus_xxxxxxxxxxxxx}',\n  '${1:txi_xxxxxxxxxxxxx}'\n)"
  },
  "Update Customer": {
    "prefix": "StripeCustomerUpdate",
    "description": "Update Customer",
    "body": "const customer = await stripe.customers.update(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Delete Discount": {
    "prefix": "StripeDiscountDelete",
    "description": "Delete Discount",
    "body": "stripe.customers.deleteDiscount(\n  '${1:cus_xxxxxxxxxxxxx}',\n  function(err, confirmation) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "Close Dispute": {
    "prefix": "StripeDisputeClose",
    "description": "Close Dispute",
    "body": "const dispute = await stripe.disputes.close(\n  '${1:dp_xxxxxxxxxxxxx}'\n)"
  },
  "List Dispute": {
    "prefix": "StripeDisputeList",
    "description": "List Dispute",
    "body": "const disputes = await stripe.disputes.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Dispute": {
    "prefix": "StripeDisputeRetrieve",
    "description": "Retrieve Dispute",
    "body": "const dispute = await stripe.disputes.retrieve(\n  '${1:dp_xxxxxxxxxxxxx}'\n)"
  },
  "Update Dispute": {
    "prefix": "StripeDisputeUpdate",
    "description": "Update Dispute",
    "body": "const dispute = await stripe.disputes.update(\n  '${1:dp_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "List Event": {
    "prefix": "StripeEventList",
    "description": "List Event",
    "body": "const events = await stripe.events.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Event": {
    "prefix": "StripeEventRetrieve",
    "description": "Retrieve Event",
    "body": "const event = await stripe.events.retrieve(\n  '${1:evt_xxxxxxxxxxxxx}'\n)"
  },
  "Create File": {
    "prefix": "StripeFileCreate",
    "description": "Create File",
    "body": "var fp = fs.readFileSync('${1:/path/to/a/file.jpg}');\nvar file = await stripe.files.create({\n  purpose: 'dispute_evidence',\n  file: {\n    data: fp,\n    name: '${2:file.jpg}',\n    type: 'application/octet-stream',\n  },\n});\n\n"
  },
  "Create File Link": {
    "prefix": "StripeFileLinkCreate",
    "description": "Create File Link",
    "body": "const fileLink = await stripe.fileLinks.create({\n  file: '${1:file_xxxxxxxxxxxxx}',\n})"
  },
  "List File Link": {
    "prefix": "StripeFileLinkList",
    "description": "List File Link",
    "body": "const fileLinks = await stripe.fileLinks.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve File Link": {
    "prefix": "StripeFileLinkRetrieve",
    "description": "Retrieve File Link",
    "body": "const fileLink = await stripe.fileLinks.retrieve(\n  '${1:link_xxxxxxxxxxxxx}'\n)"
  },
  "Update File Link": {
    "prefix": "StripeFileLinkUpdate",
    "description": "Update File Link",
    "body": "const fileLink = await stripe.fileLinks.update(\n  '${1:link_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "List File": {
    "prefix": "StripeFileList",
    "description": "List File",
    "body": "const files = await stripe.files.list({limit: ${1:3}})"
  },
  "Retrieve File": {
    "prefix": "StripeFileRetrieve",
    "description": "Retrieve File",
    "body": "const file = await stripe.files.retrieve(\n  '${1:file_xxxxxxxxxxxxx}'\n)"
  },
  "Create Funding Instruction": {
    "prefix": "StripeFundingInstructionCreate",
    "description": "Create Funding Instruction",
    "body": "const fundingInstruction = await stripe.fundingInstructions.create({\n  funding_type: '${1:bank_xxxxxxxxxxxxx}',\n  currency: '${2:eur}',\n  destination_balance: '${3:issuing}',\n  bank_transfer: {type: '${4:iban}', country: '${5:DE}'},\n})"
  },
  "List Funding Instruction": {
    "prefix": "StripeFundingInstructionList",
    "description": "List Funding Instruction",
    "body": "const fundingInstructions = await stripe.fundingInstructions.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Funding Instruction": {
    "prefix": "StripeFundingInstructionRetrieve",
    "description": "Retrieve Funding Instruction",
    "body": "const fundingInstruction = await stripe.fundingInstructions.retrieve(\n  '${1:fi_xxxxxxxxxxxxx}'\n)"
  },
  "Update Funding Instruction": {
    "prefix": "StripeFundingInstructionUpdate",
    "description": "Update Funding Instruction",
    "body": "const fundingInstruction = await stripe.fundingInstructions.update(\n  '${1:fi_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Invoice": {
    "prefix": "StripeInvoiceCreate",
    "description": "Create Invoice",
    "body": "const invoice = await stripe.invoices.create({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n})"
  },
  "Delete Invoice": {
    "prefix": "StripeInvoiceDelete",
    "description": "Delete Invoice",
    "body": "const deleted = await stripe.invoices.del(\n  '${1:in_xxxxxxxxxxxxx}'\n)"
  },
  "Finalize Invoice Invoice": {
    "prefix": "StripeInvoiceFinalizeInvoice",
    "description": "Finalize Invoice Invoice",
    "body": "const invoice = await stripe.invoices.finalizeInvoice(\n  '${1:in_xxxxxxxxxxxxx}'\n)"
  },
  "Create Invoice Item": {
    "prefix": "StripeInvoiceItemCreate",
    "description": "Create Invoice Item",
    "body": "const invoiceItem = await stripe.invoiceItems.create({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n  price: '${2:price_xxxxxxxxxxxxx}',\n})"
  },
  "Delete Invoice Item": {
    "prefix": "StripeInvoiceItemDelete",
    "description": "Delete Invoice Item",
    "body": "const deleted = await stripe.invoiceItems.del(\n  '${1:ii_xxxxxxxxxxxxx}'\n)"
  },
  "List Invoice Item": {
    "prefix": "StripeInvoiceItemList",
    "description": "List Invoice Item",
    "body": "const invoiceItems = await stripe.invoiceItems.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Invoice Item": {
    "prefix": "StripeInvoiceItemRetrieve",
    "description": "Retrieve Invoice Item",
    "body": "const invoiceItem = await stripe.invoiceItems.retrieve(\n  '${1:ii_xxxxxxxxxxxxx}'\n)"
  },
  "Update Invoice Item": {
    "prefix": "StripeInvoiceItemUpdate",
    "description": "Update Invoice Item",
    "body": "const invoiceItem = await stripe.invoiceItems.update(\n  '${1:ii_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Invoice Lines": {
    "prefix": "StripeInvoiceLines",
    "description": "Invoice Lines",
    "body": "stripe.invoices.listLineItems(\n  '${1:in_xxxxxxxxxxxxx}',\n  { limit: ${2:5} },\n  function(err, lines) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "Upcoming Invoice Lines": {
    "prefix": "StripeInvoiceLinesUpcoming",
    "description": "Upcoming Invoice Lines",
    "body": "const lines = await stripe.invoices.listUpcomingLineItems({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n  limit: ${2:5},\n});\n\n"
  },
  "List Invoice": {
    "prefix": "StripeInvoiceList",
    "description": "List Invoice",
    "body": "const invoices = await stripe.invoices.list({\n  limit: ${1:3},\n})"
  },
  "Mark Uncollectible Invoice": {
    "prefix": "StripeInvoiceMarkUncollectible",
    "description": "Mark Uncollectible Invoice",
    "body": "const invoice = await stripe.invoices.markUncollectible(\n  '${1:in_xxxxxxxxxxxxx}'\n)"
  },
  "Pay Invoice": {
    "prefix": "StripeInvoicePay",
    "description": "Pay Invoice",
    "body": "const invoice = await stripe.invoices.pay(\n  '${1:in_xxxxxxxxxxxxx}'\n)"
  },
  "Retrieve Invoice": {
    "prefix": "StripeInvoiceRetrieve",
    "description": "Retrieve Invoice",
    "body": "const invoice = await stripe.invoices.retrieve(\n  '${1:in_xxxxxxxxxxxxx}'\n)"
  },
  "Send Invoice Invoice": {
    "prefix": "StripeInvoiceSendInvoice",
    "description": "Send Invoice Invoice",
    "body": "const invoice = await stripe.invoices.sendInvoice(\n  '${1:in_xxxxxxxxxxxxx}'\n)"
  },
  "Upcoming Invoice": {
    "prefix": "StripeInvoiceUpcoming",
    "description": "Upcoming Invoice",
    "body": "const invoice = await stripe.invoices.retrieveUpcoming({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n});\n\n"
  },
  "Update Invoice": {
    "prefix": "StripeInvoiceUpdate",
    "description": "Update Invoice",
    "body": "const invoice = await stripe.invoices.update(\n  '${1:in_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Void Invoice Invoice": {
    "prefix": "StripeInvoiceVoidInvoice",
    "description": "Void Invoice Invoice",
    "body": "const invoice = await stripe.invoices.voidInvoice(\n  '${1:in_xxxxxxxxxxxxx}'\n)"
  },
  "Approve Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationApprove",
    "description": "Approve Issuing Authorization",
    "body": "const authorization = await stripe.issuing.authorizations.approve(\n  '${1:iauth_xxxxxxxxxxxxx}'\n)"
  },
  "Decline Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationDecline",
    "description": "Decline Issuing Authorization",
    "body": "const authorization = await stripe.issuing.authorizations.decline(\n  '${1:iauth_xxxxxxxxxxxxx}'\n)"
  },
  "List Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationList",
    "description": "List Issuing Authorization",
    "body": "const authorizations = await stripe.issuing.authorizations.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationRetrieve",
    "description": "Retrieve Issuing Authorization",
    "body": "const authorization = await stripe.issuing.authorizations.retrieve(\n  '${1:iauth_xxxxxxxxxxxxx}'\n)"
  },
  "Update Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationUpdate",
    "description": "Update Issuing Authorization",
    "body": "const authorization = await stripe.issuing.authorizations.update(\n  '${1:iauth_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Issuing Card": {
    "prefix": "StripeIssuingCardCreate",
    "description": "Create Issuing Card",
    "body": "const card = await stripe.issuing.cards.create({\n  cardholder: '${1:ich_xxxxxxxxxxxxx}',\n  currency: '${2:usd}',\n  type: '${3:virtual}',\n})"
  },
  "Create Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderCreate",
    "description": "Create Issuing Cardholder",
    "body": "const cardholder = await stripe.issuing.cardholders.create({\n  type: '${1:individual}',\n  name: '${2:Jenny Rosen}',\n  email: '${3:jenny.rosen@example.com}',\n  phone_number: '${4:+18888675309}',\n  billing: {\n    address: {\n      line1: '${5:1234 Main Street}',\n      city: '${6:San Francisco}',\n      state: '${7:CA}',\n      country: '${8:US}',\n      postal_code: '${9:94111}',\n    },\n  },\n})"
  },
  "List Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderList",
    "description": "List Issuing Cardholder",
    "body": "const cardholders = await stripe.issuing.cardholders.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderRetrieve",
    "description": "Retrieve Issuing Cardholder",
    "body": "const cardholder = await stripe.issuing.cardholders.retrieve(\n  '${1:ich_xxxxxxxxxxxxx}'\n)"
  },
  "Update Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderUpdate",
    "description": "Update Issuing Cardholder",
    "body": "const cardholder = await stripe.issuing.cardholders.update(\n  '${1:ich_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "List Issuing Card": {
    "prefix": "StripeIssuingCardList",
    "description": "List Issuing Card",
    "body": "const cards = await stripe.issuing.cards.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Issuing Card": {
    "prefix": "StripeIssuingCardRetrieve",
    "description": "Retrieve Issuing Card",
    "body": "const card = await stripe.issuing.cards.retrieve(\n  '${1:ic_xxxxxxxxxxxxx}'\n)"
  },
  "Update Issuing Card": {
    "prefix": "StripeIssuingCardUpdate",
    "description": "Update Issuing Card",
    "body": "const card = await stripe.issuing.cards.update(\n  '${1:ic_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Issuing Dispute": {
    "prefix": "StripeIssuingDisputeCreate",
    "description": "Create Issuing Dispute",
    "body": "const dispute = await stripe.issuing.disputes.create({\n  transaction: '${1:ipi_xxxxxxxxxxxxx}',\n  evidence: {\n    reason: '${2:fraudulent}',\n    fraudulent: {\n      explanation: '${3:Purchase was unrecognized.}',\n    },\n  },\n})"
  },
  "List Issuing Dispute": {
    "prefix": "StripeIssuingDisputeList",
    "description": "List Issuing Dispute",
    "body": "const disputes = await stripe.issuing.disputes.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Issuing Dispute": {
    "prefix": "StripeIssuingDisputeRetrieve",
    "description": "Retrieve Issuing Dispute",
    "body": "const dispute = await stripe.issuing.disputes.retrieve(\n  '${1:idp_xxxxxxxxxxxxx}'\n)"
  },
  "Submit Issuing Dispute": {
    "prefix": "StripeIssuingDisputeSubmit",
    "description": "Submit Issuing Dispute",
    "body": "const dispute = await stripe.issuing.disputes.submit(\n  '${1:idp_xxxxxxxxxxxxx}'\n)"
  },
  "Update Issuing Dispute": {
    "prefix": "StripeIssuingDisputeUpdate",
    "description": "Update Issuing Dispute",
    "body": "const dispute = await stripe.issuing.disputes.update(\n  '${1:idp_xxxxxxxxxxxxx}',\n  {\n    evidence: {\n      reason: '${2:not_xxxxxxxxxxxxx}',\n      not_received: {\n        expected_at: ${3:1590000000},\n        explanation${4:}: '',\n        product_description: '${5:Baseball cap}',\n        product_type: '${6:merchandise}',\n      },\n    },\n  }\n)"
  },
  "List Issuing Transaction": {
    "prefix": "StripeIssuingTransactionList",
    "description": "List Issuing Transaction",
    "body": "const transactions = await stripe.issuing.transactions.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Issuing Transaction": {
    "prefix": "StripeIssuingTransactionRetrieve",
    "description": "Retrieve Issuing Transaction",
    "body": "const transaction = await stripe.issuing.transactions.retrieve(\n  '${1:ipi_xxxxxxxxxxxxx}'\n)"
  },
  "Update Issuing Transaction": {
    "prefix": "StripeIssuingTransactionUpdate",
    "description": "Update Issuing Transaction",
    "body": "const transaction = await stripe.issuing.transactions.update(\n  '${1:ipi_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Retrieve Mandate": {
    "prefix": "StripeMandateRetrieve",
    "description": "Retrieve Mandate",
    "body": "const mandate = await stripe.mandates.retrieve(\n  '${1:mandate_xxxxxxxxxxxxx}'\n)"
  },
  "Create Order": {
    "prefix": "StripeOrderCreate",
    "description": "Create Order",
    "body": "const order = await stripe.orders.create({\n  currency: '${1:usd}',\n  email: '${2:jenny.rosen@example.com}',\n  items: [\n    {type: '${3:sku}', parent: '${4:sku_xxxxxxxxxxxxx}'},\n  ],\n  shipping: {\n    name: '${5:Jenny Rosen}',\n    address: {\n      line1: '${6:1234 Main Street}',\n      city: '${7:San Francisco}',\n      state: '${8:CA}',\n      country: '${9:US}',\n      postal_code: '${10:94111}',\n    },\n  },\n})"
  },
  "List Order": {
    "prefix": "StripeOrderList",
    "description": "List Order",
    "body": "const orders = await stripe.orders.list({\n  limit: ${1:3},\n})"
  },
  "Pay Order": {
    "prefix": "StripeOrderPay",
    "description": "Pay Order",
    "body": "const order = await stripe.orders.pay(\n  '${1:or_xxxxxxxxxxxxx}',\n  {source: '${2:tok_xxxx}'}\n)"
  },
  "Retrieve Order": {
    "prefix": "StripeOrderRetrieve",
    "description": "Retrieve Order",
    "body": "const order = await stripe.orders.retrieve(\n  '${1:or_xxxxxxxxxxxxx}'\n)"
  },
  "Return Order": {
    "prefix": "StripeOrderReturn",
    "description": "Return Order",
    "body": "stripe.orders.returnOrder(\n  '${1:or_xxxxxxxxxxxxx}',\n  {\n    items: [\n      {\n        type: 'sku',\n        parent: '${2:sku_xxxxxxxxxxxxx}',\n      },\n    ],\n  }, function(err, order) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "List Order Return": {
    "prefix": "StripeOrderReturnList",
    "description": "List Order Return",
    "body": "const orderReturns = await stripe.orderReturns.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Order Return": {
    "prefix": "StripeOrderReturnRetrieve",
    "description": "Retrieve Order Return",
    "body": "const orderReturn = await stripe.orderReturns.retrieve(\n  '${1:orret_xxxxxxxxxxxxx}'\n)"
  },
  "Update Order": {
    "prefix": "StripeOrderUpdate",
    "description": "Update Order",
    "body": "const order = await stripe.orders.update(\n  '${1:or_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Cancel Payment Intent": {
    "prefix": "StripePaymentIntentCancel",
    "description": "Cancel Payment Intent",
    "body": "// To create a PaymentIntent, see our guide at: https://mock.stripe.com/docs/payments/payment-intents/creating-payment-intents#creating-for-automatic\nconst paymentIntent = await stripe.paymentIntents.cancel(\n  '${1:pi_xxxxxxxxxxxxx}'\n)"
  },
  "Capture Payment Intent": {
    "prefix": "StripePaymentIntentCapture",
    "description": "Capture Payment Intent",
    "body": "// To create a requires_capture PaymentIntent, see our guide at: https://mock.stripe.com/docs/payments/capture-later\nconst paymentIntent = await stripe.paymentIntents.capture(\n  '${1:pi_xxxxxxxxxxxxx}'\n)"
  },
  "Confirm Payment Intent": {
    "prefix": "StripePaymentIntentConfirm",
    "description": "Confirm Payment Intent",
    "body": "// To create a PaymentIntent for confirmation, see our guide at: https://mock.stripe.com/docs/payments/payment-intents/creating-payment-intents#creating-for-automatic\nconst paymentIntent = await stripe.paymentIntents.confirm(\n  '${1:pi_xxxxxxxxxxxxx}',\n  {payment_method: '${2:pm_card_visa}'}\n)"
  },
  "Create Payment Intent": {
    "prefix": "StripePaymentIntentCreate",
    "description": "Create Payment Intent",
    "body": "const paymentIntent = await stripe.paymentIntents.create({\n  amount: ${1:2000},\n  currency: '${2:usd}',\n  payment_method_types: ['${3:card}'],\n})"
  },
  "List Payment Intent": {
    "prefix": "StripePaymentIntentList",
    "description": "List Payment Intent",
    "body": "const paymentIntents = await stripe.paymentIntents.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Payment Intent": {
    "prefix": "StripePaymentIntentRetrieve",
    "description": "Retrieve Payment Intent",
    "body": "const paymentIntent = await stripe.paymentIntents.retrieve(\n  '${1:pi_xxxxxxxxxxxxx}'\n)"
  },
  "Update Payment Intent": {
    "prefix": "StripePaymentIntentUpdate",
    "description": "Update Payment Intent",
    "body": "const paymentIntent = await stripe.paymentIntents.update(\n  '${1:pi_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Attach Payment Method": {
    "prefix": "StripePaymentMethodAttach",
    "description": "Attach Payment Method",
    "body": "const paymentMethod = await stripe.paymentMethods.attach(\n  '${1:pm_xxxxxxxxxxxxx}',\n  {customer: '${2:cus_xxxxxxxxxxxxx}'}\n)"
  },
  "Create Payment Method": {
    "prefix": "StripePaymentMethodCreate",
    "description": "Create Payment Method",
    "body": "const paymentMethod = await stripe.paymentMethods.create({\n  type: '${1:card}',\n  card: {\n    number: '${2:4242424242424242}',\n    exp_month: ${3:5},\n    exp_year: ${4:2022},\n    cvc: '${5:314}',\n  },\n})"
  },
  "Detach Payment Method": {
    "prefix": "StripePaymentMethodDetach",
    "description": "Detach Payment Method",
    "body": "const paymentMethod = await stripe.paymentMethods.detach(\n  '${1:pm_xxxxxxxxxxxxx}'\n)"
  },
  "List Payment Method": {
    "prefix": "StripePaymentMethodList",
    "description": "List Payment Method",
    "body": "const paymentMethods = await stripe.paymentMethods.list({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n  type: '${2:card}',\n})"
  },
  "Retrieve Payment Method": {
    "prefix": "StripePaymentMethodRetrieve",
    "description": "Retrieve Payment Method",
    "body": "const paymentMethod = await stripe.paymentMethods.retrieve(\n  '${1:pm_xxxxxxxxxxxxx}'\n)"
  },
  "Update Payment Method": {
    "prefix": "StripePaymentMethodUpdate",
    "description": "Update Payment Method",
    "body": "const paymentMethod = await stripe.paymentMethods.update(\n  '${1:pm_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Cancel Payout": {
    "prefix": "StripePayoutCancel",
    "description": "Cancel Payout",
    "body": "const payout = await stripe.payouts.cancel(\n  '${1:po_xxxxxxxxxxxxx}'\n)"
  },
  "Create Payout": {
    "prefix": "StripePayoutCreate",
    "description": "Create Payout",
    "body": "const payout = await stripe.payouts.create({\n  amount: ${1:1100},\n  currency: '${2:usd}',\n})"
  },
  "List Payout": {
    "prefix": "StripePayoutList",
    "description": "List Payout",
    "body": "const payouts = await stripe.payouts.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Payout": {
    "prefix": "StripePayoutRetrieve",
    "description": "Retrieve Payout",
    "body": "const payout = await stripe.payouts.retrieve(\n  '${1:po_xxxxxxxxxxxxx}'\n)"
  },
  "Reverse Payout": {
    "prefix": "StripePayoutReverse",
    "description": "Reverse Payout",
    "body": "const payout = await stripe.payouts.reverse(\n  '${1:po_xxxxxxxxxxxxx}'\n)"
  },
  "Update Payout": {
    "prefix": "StripePayoutUpdate",
    "description": "Update Payout",
    "body": "const payout = await stripe.payouts.update(\n  '${1:po_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Plan": {
    "prefix": "StripePlanCreate",
    "description": "Create Plan",
    "body": "const plan = await stripe.plans.create({\n  amount: ${1:2000},\n  currency: '${2:usd}',\n  interval: '${3:month}',\n  product: '${4:prod_xxxxxxxxxxxxx}',\n})"
  },
  "Delete Plan": {
    "prefix": "StripePlanDelete",
    "description": "Delete Plan",
    "body": "const deleted = await stripe.plans.del(\n  '${1:price_xxxxxxxxxxxxx}'\n)"
  },
  "List Plan": {
    "prefix": "StripePlanList",
    "description": "List Plan",
    "body": "const plans = await stripe.plans.list({limit: ${1:3}})"
  },
  "Retrieve Plan": {
    "prefix": "StripePlanRetrieve",
    "description": "Retrieve Plan",
    "body": "const plan = await stripe.plans.retrieve(\n  '${1:price_xxxxxxxxxxxxx}'\n)"
  },
  "Update Plan": {
    "prefix": "StripePlanUpdate",
    "description": "Update Plan",
    "body": "const plan = await stripe.plans.update(\n  '${1:price_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Price": {
    "prefix": "StripePriceCreate",
    "description": "Create Price",
    "body": "const price = await stripe.prices.create({\n  unit_amount: ${1:2000},\n  currency: '${2:usd}',\n  recurring: {interval: '${3:month}'},\n  product: '${4:prod_xxxxxxxxxxxxx}',\n})"
  },
  "List Price": {
    "prefix": "StripePriceList",
    "description": "List Price",
    "body": "const prices = await stripe.prices.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Price": {
    "prefix": "StripePriceRetrieve",
    "description": "Retrieve Price",
    "body": "const price = await stripe.prices.retrieve(\n  '${1:price_xxxxxxxxxxxxx}'\n)"
  },
  "Update Price": {
    "prefix": "StripePriceUpdate",
    "description": "Update Price",
    "body": "const price = await stripe.prices.update(\n  '${1:price_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Product": {
    "prefix": "StripeProductCreate",
    "description": "Create Product",
    "body": "const product = await stripe.products.create({\n  name: '${1:Gold Special}',\n})"
  },
  "Delete Product": {
    "prefix": "StripeProductDelete",
    "description": "Delete Product",
    "body": "const deleted = await stripe.products.del(\n  '${1:prod_xxxxxxxxxxxxx}'\n)"
  },
  "List Product": {
    "prefix": "StripeProductList",
    "description": "List Product",
    "body": "const products = await stripe.products.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Product": {
    "prefix": "StripeProductRetrieve",
    "description": "Retrieve Product",
    "body": "const product = await stripe.products.retrieve(\n  '${1:prod_xxxxxxxxxxxxx}'\n)"
  },
  "Update Product": {
    "prefix": "StripeProductUpdate",
    "description": "Update Product",
    "body": "const product = await stripe.products.update(\n  '${1:prod_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Promotion Code": {
    "prefix": "StripePromotionCodeCreate",
    "description": "Create Promotion Code",
    "body": "const promotionCode = await stripe.promotionCodes.create({\n  coupon: '${1:25_5OFF}',\n})"
  },
  "List Promotion Code": {
    "prefix": "StripePromotionCodeList",
    "description": "List Promotion Code",
    "body": "const promotionCodes = await stripe.promotionCodes.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Promotion Code": {
    "prefix": "StripePromotionCodeRetrieve",
    "description": "Retrieve Promotion Code",
    "body": "const promotionCode = await stripe.promotionCodes.retrieve(\n  '${1:promo_xxxxxxxxxxxxx}'\n)"
  },
  "Update Promotion Code": {
    "prefix": "StripePromotionCodeUpdate",
    "description": "Update Promotion Code",
    "body": "const promotionCode = await stripe.promotionCodes.update(\n  '${1:promo_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "List Radar Early Fraud Warning": {
    "prefix": "StripeRadarEarlyFraudWarningList",
    "description": "List Radar Early Fraud Warning",
    "body": "const earlyFraudWarnings = await stripe.radar.earlyFraudWarnings.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Radar Early Fraud Warning": {
    "prefix": "StripeRadarEarlyFraudWarningRetrieve",
    "description": "Retrieve Radar Early Fraud Warning",
    "body": "const earlyFraudWarning = await stripe.radar.earlyFraudWarnings.retrieve(\n  '${1:issfr_xxxxxxxxxxxxx}'\n)"
  },
  "Create Radar Value List": {
    "prefix": "StripeRadarValueListCreate",
    "description": "Create Radar Value List",
    "body": "const valueList = await stripe.radar.valueLists.create({\n  alias: '${1:custom_ip_xxxxxxxxxxxxx}',\n  name: '${2:Custom IP Blocklist}',\n  item_type: '${3:ip_address}',\n})"
  },
  "Delete Radar Value List": {
    "prefix": "StripeRadarValueListDelete",
    "description": "Delete Radar Value List",
    "body": "const deleted = await stripe.radar.valueLists.del(\n  '${1:rsl_xxxxxxxxxxxxx}'\n)"
  },
  "Create Radar Value List Item": {
    "prefix": "StripeRadarValueListItemCreate",
    "description": "Create Radar Value List Item",
    "body": "const valueListItem = await stripe.radar.valueListItems.create({\n  value_list: '${1:rsl_xxxxxxxxxxxxx}',\n  value: '${2:1.2.3.4}',\n})"
  },
  "Delete Radar Value List Item": {
    "prefix": "StripeRadarValueListItemDelete",
    "description": "Delete Radar Value List Item",
    "body": "const deleted = await stripe.radar.valueListItems.del(\n  '${1:rsli_xxxxxxxxxxxxx}'\n)"
  },
  "List Radar Value List Item": {
    "prefix": "StripeRadarValueListItemList",
    "description": "List Radar Value List Item",
    "body": "const valueListItems = await stripe.radar.valueListItems.list({\n  limit: ${1:3},\n  value_list: '${2:rsl_xxxxxxxxxxxxx}',\n})"
  },
  "Retrieve Radar Value List Item": {
    "prefix": "StripeRadarValueListItemRetrieve",
    "description": "Retrieve Radar Value List Item",
    "body": "const valueListItem = await stripe.radar.valueListItems.retrieve(\n  '${1:rsli_xxxxxxxxxxxxx}'\n)"
  },
  "List Radar Value List": {
    "prefix": "StripeRadarValueListList",
    "description": "List Radar Value List",
    "body": "const valueLists = await stripe.radar.valueLists.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Radar Value List": {
    "prefix": "StripeRadarValueListRetrieve",
    "description": "Retrieve Radar Value List",
    "body": "const valueList = await stripe.radar.valueLists.retrieve(\n  '${1:rsl_xxxxxxxxxxxxx}'\n)"
  },
  "Update Radar Value List": {
    "prefix": "StripeRadarValueListUpdate",
    "description": "Update Radar Value List",
    "body": "const valueList = await stripe.radar.valueLists.update(\n  '${1:rsl_xxxxxxxxxxxxx}',\n  {name: '${2:Updated IP Block List}'}\n)"
  },
  "Create Refund": {
    "prefix": "StripeRefundCreate",
    "description": "Create Refund",
    "body": "const refund = await stripe.refunds.create({\n  charge: '${1:ch_xxxxxxxxxxxxx}',\n})"
  },
  "List Refund": {
    "prefix": "StripeRefundList",
    "description": "List Refund",
    "body": "const refunds = await stripe.refunds.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Refund": {
    "prefix": "StripeRefundRetrieve",
    "description": "Retrieve Refund",
    "body": "const refund = await stripe.refunds.retrieve(\n  '${1:re_xxxxxxxxxxxxx}'\n)"
  },
  "Update Refund": {
    "prefix": "StripeRefundUpdate",
    "description": "Update Refund",
    "body": "const refund = await stripe.refunds.update(\n  '${1:re_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Reporting Report Run": {
    "prefix": "StripeReportingReportRunCreate",
    "description": "Create Reporting Report Run",
    "body": "const reportRun = await stripe.reporting.reportRuns.create({\n  report_type: '${1:balance.summary.1}',\n  parameters: {\n    interval_start: ${2:1522540800},\n    interval_end: ${3:1525132800},\n  },\n})"
  },
  "List Reporting Report Run": {
    "prefix": "StripeReportingReportRunList",
    "description": "List Reporting Report Run",
    "body": "const reportRuns = await stripe.reporting.reportRuns.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Reporting Report Run": {
    "prefix": "StripeReportingReportRunRetrieve",
    "description": "Retrieve Reporting Report Run",
    "body": "const reportRun = await stripe.reporting.reportRuns.retrieve(\n  '${1:frr_xxxxxxxxxxxxx}'\n)"
  },
  "List Reporting Report Type": {
    "prefix": "StripeReportingReportTypeList",
    "description": "List Reporting Report Type",
    "body": "const reportTypes = await stripe.reporting.reportTypes.list()"
  },
  "Retrieve Reporting Report Type": {
    "prefix": "StripeReportingReportTypeRetrieve",
    "description": "Retrieve Reporting Report Type",
    "body": "const reportType = await stripe.reporting.reportTypes.retrieve(\n  '${1:balance.summary.1}'\n)"
  },
  "Approve Review": {
    "prefix": "StripeReviewApprove",
    "description": "Approve Review",
    "body": "const review = await stripe.reviews.approve(\n  '${1:prv_xxxxxxxxxxxxx}'\n)"
  },
  "List Review": {
    "prefix": "StripeReviewList",
    "description": "List Review",
    "body": "const reviews = await stripe.reviews.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Review": {
    "prefix": "StripeReviewRetrieve",
    "description": "Retrieve Review",
    "body": "const review = await stripe.reviews.retrieve(\n  '${1:prv_xxxxxxxxxxxxx}'\n)"
  },
  "List Setup Attempt": {
    "prefix": "StripeSetupAttemptList",
    "description": "List Setup Attempt",
    "body": "const setupAttempts = await stripe.setupAttempts.list({\n  limit: ${1:3},\n})"
  },
  "Cancel Setup Intent": {
    "prefix": "StripeSetupIntentCancel",
    "description": "Cancel Setup Intent",
    "body": "const setupIntent = await stripe.setupIntents.cancel(\n  '${1:seti_xxxxxxxxxxxxx}'\n)"
  },
  "Confirm Setup Intent": {
    "prefix": "StripeSetupIntentConfirm",
    "description": "Confirm Setup Intent",
    "body": "const setupIntent = await stripe.setupIntents.confirm(\n  '${1:seti_xxxxxxxxxxxxx}',\n  {payment_method: '${2:pm_card_visa}'}\n)"
  },
  "Create Setup Intent": {
    "prefix": "StripeSetupIntentCreate",
    "description": "Create Setup Intent",
    "body": "const setupIntent = await stripe.setupIntents.create({\n  payment_method_types: ['${1:card}'],\n})"
  },
  "List Setup Intent": {
    "prefix": "StripeSetupIntentList",
    "description": "List Setup Intent",
    "body": "const setupIntents = await stripe.setupIntents.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Setup Intent": {
    "prefix": "StripeSetupIntentRetrieve",
    "description": "Retrieve Setup Intent",
    "body": "const setupIntent = await stripe.setupIntents.retrieve(\n  '${1:seti_xxxxxxxxxxxxx}'\n)"
  },
  "Update Setup Intent": {
    "prefix": "StripeSetupIntentUpdate",
    "description": "Update Setup Intent",
    "body": "const setupIntent = await stripe.setupIntents.update(\n  '${1:seti_xxxxxxxxxxxxx}',\n  {metadata: {user_id: '${2:3435453}'}}\n)"
  },
  "List Sigma Scheduled Query Run": {
    "prefix": "StripeSigmaScheduledQueryRunList",
    "description": "List Sigma Scheduled Query Run",
    "body": "const scheduledQueryRuns = await stripe.sigma.scheduledQueryRuns.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Sigma Scheduled Query Run": {
    "prefix": "StripeSigmaScheduledQueryRunRetrieve",
    "description": "Retrieve Sigma Scheduled Query Run",
    "body": "const scheduledQueryRun = await stripe.sigma.scheduledQueryRuns.retrieve(\n  '${1:sqr_xxxxxxxxxxxxx}'\n)"
  },
  "Create Sku": {
    "prefix": "StripeSkuCreate",
    "description": "Create Sku",
    "body": "const sku = await stripe.skus.create({\n  attributes: {size: '${1:Medium}', gender: '${2:Unisex}'},\n  price: ${3:1500},\n  currency: '${4:usd}',\n  inventory: {type: '${5:finite}', quantity: ${6:500}},\n  product: '${7:prod_xxxxxxxxxxxxx}',\n})"
  },
  "Delete Sku": {
    "prefix": "StripeSkuDelete",
    "description": "Delete Sku",
    "body": "const deleted = await stripe.skus.del(\n  '${1:sku_xxxxxxxxxxxxx}'\n)"
  },
  "List Sku": {
    "prefix": "StripeSkuList",
    "description": "List Sku",
    "body": "const skus = await stripe.skus.list({limit: ${1:3}})"
  },
  "Retrieve Sku": {
    "prefix": "StripeSkuRetrieve",
    "description": "Retrieve Sku",
    "body": "const sku = await stripe.skus.retrieve(\n  '${1:sku_xxxxxxxxxxxxx}'\n)"
  },
  "Update Sku": {
    "prefix": "StripeSkuUpdate",
    "description": "Update Sku",
    "body": "const sku = await stripe.skus.update(\n  '${1:sku_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Attach Source": {
    "prefix": "StripeSourceAttach",
    "description": "Attach Source",
    "body": "stripe.customers.createSource(\n  '${1:cus_xxxxxxxxxxxxx}',\n  {\n    source: '${2:src_xxxxxxxxxxxxx}',\n  },\n  function(err, source) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "Create Source": {
    "prefix": "StripeSourceCreate",
    "description": "Create Source",
    "body": "stripe.sources.create({\n  type: 'ach_credit_transfer',\n  currency: '${1:usd}',\n  owner: {\n    email: '${2:jenny.rosen@example.com}'\n  }\n}, function(err, source) {\n  // asynchronously called\n});\n\n"
  },
  "Detach Source": {
    "prefix": "StripeSourceDetach",
    "description": "Detach Source",
    "body": "stripe.customers.deleteSource(\n  '${1:cus_xxxxxxxxxxxxx}',\n  '${2:src_xxxxxxxxxxxxx}',\n  function(err, confirmation) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "Retrieve Source": {
    "prefix": "StripeSourceRetrieve",
    "description": "Retrieve Source",
    "body": "const source = await stripe.sources.retrieve(\n  '${1:src_xxxxxxxxxxxxx}'\n)"
  },
  "Update Source": {
    "prefix": "StripeSourceUpdate",
    "description": "Update Source",
    "body": "const source = await stripe.sources.update(\n  '${1:src_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Subscription": {
    "prefix": "StripeSubscriptionCreate",
    "description": "Create Subscription",
    "body": "const subscription = await stripe.subscriptions.create({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n  items: [{price: '${2:price_xxxxxxxxxxxxx}'}],\n})"
  },
  "Delete Subscription": {
    "prefix": "StripeSubscriptionDelete",
    "description": "Delete Subscription",
    "body": "const deleted = await stripe.subscriptions.del(\n  '${1:sub_xxxxxxxxxxxxx}'\n)"
  },
  "Delete Subscription Discount": {
    "prefix": "StripeSubscriptionDiscountDelete",
    "description": "Delete Subscription Discount",
    "body": "stripe.subscriptions.deleteDiscount(\n  '${1:sub_xxxxxxxxxxxxx}',\n  function(err, confirmation) {\n    // asynchronously called\n  }\n);\n\n"
  },
  "Create Subscription Item": {
    "prefix": "StripeSubscriptionItemCreate",
    "description": "Create Subscription Item",
    "body": "const subscriptionItem = await stripe.subscriptionItems.create({\n  subscription: '${1:sub_xxxxxxxxxxxxx}',\n  price: '${2:price_xxxxxxxxxxxxx}',\n  quantity: ${3:2},\n})"
  },
  "Delete Subscription Item": {
    "prefix": "StripeSubscriptionItemDelete",
    "description": "Delete Subscription Item",
    "body": "const deleted = await stripe.subscriptionItems.del(\n  '${1:si_xxxxxxxxxxxxx}'\n)"
  },
  "List Subscription Item": {
    "prefix": "StripeSubscriptionItemList",
    "description": "List Subscription Item",
    "body": "const subscriptionItems = await stripe.subscriptionItems.list({\n  subscription: '${1:sub_xxxxxxxxxxxxx}',\n})"
  },
  "Retrieve Subscription Item": {
    "prefix": "StripeSubscriptionItemRetrieve",
    "description": "Retrieve Subscription Item",
    "body": "const subscriptionItem = await stripe.subscriptionItems.retrieve(\n  '${1:si_xxxxxxxxxxxxx}'\n)"
  },
  "Update Subscription Item": {
    "prefix": "StripeSubscriptionItemUpdate",
    "description": "Update Subscription Item",
    "body": "const subscriptionItem = await stripe.subscriptionItems.update(\n  '${1:si_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Subscription Item Usage Record": {
    "prefix": "StripeSubscriptionItemUsageRecordCreate",
    "description": "Create Subscription Item Usage Record",
    "body": "const usageRecord = await stripe.subscriptionItems.createUsageRecord(\n  '${1:si_xxxxxxxxxxxxx}',\n  {quantity: ${2:100}, timestamp: ${3:1571252444}}\n)"
  },
  "List Subscription Item Usage Record Summary": {
    "prefix": "StripeSubscriptionItemUsageRecordSummaryList",
    "description": "List Subscription Item Usage Record Summary",
    "body": "const usageRecordSummaries = await stripe.subscriptionItems.listUsageRecordSummaries(\n  '${1:si_xxxxxxxxxxxxx}',\n  {limit: ${2:3}}\n)"
  },
  "List Subscription": {
    "prefix": "StripeSubscriptionList",
    "description": "List Subscription",
    "body": "const subscriptions = await stripe.subscriptions.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Subscription": {
    "prefix": "StripeSubscriptionRetrieve",
    "description": "Retrieve Subscription",
    "body": "const subscription = await stripe.subscriptions.retrieve(\n  '${1:sub_xxxxxxxxxxxxx}'\n)"
  },
  "Cancel Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleCancel",
    "description": "Cancel Subscription Schedule",
    "body": "const subscriptionSchedule = await stripe.subscriptionSchedules.cancel(\n  '${1:sub_sched_xxxxxxxxxxxxx}'\n)"
  },
  "Create Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleCreate",
    "description": "Create Subscription Schedule",
    "body": "const subscriptionSchedule = await stripe.subscriptionSchedules.create({\n  customer: '${1:cus_xxxxxxxxxxxxx}',\n  start_date: ${2:1620753115},\n  end_behavior: '${3:release}',\n  phases: [\n    {\n      items: [\n        {\n          price: '${4:price_xxxxxxxxxxxxx}',\n          quantity: ${5:1},\n        },\n      ],\n      iterations: ${6:12},\n    },\n  ],\n})"
  },
  "List Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleList",
    "description": "List Subscription Schedule",
    "body": "const subscriptionSchedules = await stripe.subscriptionSchedules.list({\n  limit: ${1:3},\n})"
  },
  "Release Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleRelease",
    "description": "Release Subscription Schedule",
    "body": "const subscriptionSchedule = await stripe.subscriptionSchedules.release(\n  '${1:sub_sched_xxxxxxxxxxxxx}'\n)"
  },
  "Retrieve Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleRetrieve",
    "description": "Retrieve Subscription Schedule",
    "body": "const subscriptionSchedule = await stripe.subscriptionSchedules.retrieve(\n  '${1:sub_sched_xxxxxxxxxxxxx}'\n)"
  },
  "Update Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleUpdate",
    "description": "Update Subscription Schedule",
    "body": "const subscriptionSchedule = await stripe.subscriptionSchedules.update(\n  '${1:sub_sched_xxxxxxxxxxxxx}',\n  {end_behavior: '${2:release}'}\n)"
  },
  "Update Subscription": {
    "prefix": "StripeSubscriptionUpdate",
    "description": "Update Subscription",
    "body": "const subscription = await stripe.subscriptions.update(\n  '${1:sub_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Tax Rate": {
    "prefix": "StripeTaxRateCreate",
    "description": "Create Tax Rate",
    "body": "const taxRate = await stripe.taxRates.create({\n  display_name: '${1:VAT}',\n  description: '${2:VAT Germany}',\n  jurisdiction: '${3:DE}',\n  percentage: ${4:16},\n  inclusive: ${5:false},\n})"
  },
  "List Tax Rate": {
    "prefix": "StripeTaxRateList",
    "description": "List Tax Rate",
    "body": "const taxRates = await stripe.taxRates.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Tax Rate": {
    "prefix": "StripeTaxRateRetrieve",
    "description": "Retrieve Tax Rate",
    "body": "const taxRate = await stripe.taxRates.retrieve(\n  '${1:txr_xxxxxxxxxxxxx}'\n)"
  },
  "Update Tax Rate": {
    "prefix": "StripeTaxRateUpdate",
    "description": "Update Tax Rate",
    "body": "const taxRate = await stripe.taxRates.update(\n  '${1:txr_xxxxxxxxxxxxx}',\n  {active: ${2:false}}\n)"
  },
  "Create Terminal Connection Token": {
    "prefix": "StripeTerminalConnectionTokenCreate",
    "description": "Create Terminal Connection Token",
    "body": "const connectionToken = await stripe.terminal.connectionTokens.create()"
  },
  "Create Terminal Location": {
    "prefix": "StripeTerminalLocationCreate",
    "description": "Create Terminal Location",
    "body": "const location = await stripe.terminal.locations.create({\n  display_name: '${1:My First Store}',\n  address: {\n    line1: '${2:1234 Main Street}',\n    city: '${3:San Francisco}',\n    country: '${4:US}',\n    postal_code: '${5:94111}',\n  },\n})"
  },
  "Delete Terminal Location": {
    "prefix": "StripeTerminalLocationDelete",
    "description": "Delete Terminal Location",
    "body": "const deleted = await stripe.terminal.locations.del(\n  '${1:tml_xxxxxxxxxxxxx}'\n)"
  },
  "List Terminal Location": {
    "prefix": "StripeTerminalLocationList",
    "description": "List Terminal Location",
    "body": "const locations = await stripe.terminal.locations.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Terminal Location": {
    "prefix": "StripeTerminalLocationRetrieve",
    "description": "Retrieve Terminal Location",
    "body": "const location = await stripe.terminal.locations.retrieve(\n  '${1:tml_xxxxxxxxxxxxx}'\n)"
  },
  "Update Terminal Location": {
    "prefix": "StripeTerminalLocationUpdate",
    "description": "Update Terminal Location",
    "body": "const location = await stripe.terminal.locations.update(\n  '${1:tml_xxxxxxxxxxxxx}',\n  {display_name: '${2:My First Store}'}\n)"
  },
  "Create Terminal Reader": {
    "prefix": "StripeTerminalReaderCreate",
    "description": "Create Terminal Reader",
    "body": "const reader = await stripe.terminal.readers.create({\n  registration_code: '${1:puppies-plug-could}',\n  label: '${2:Blue Rabbit}',\n  location: '${3:tml_1234}',\n})"
  },
  "Delete Terminal Reader": {
    "prefix": "StripeTerminalReaderDelete",
    "description": "Delete Terminal Reader",
    "body": "const deleted = await stripe.terminal.readers.del(\n  '${1:tmr_P400-123-456-789}'\n)"
  },
  "List Terminal Reader": {
    "prefix": "StripeTerminalReaderList",
    "description": "List Terminal Reader",
    "body": "const readers = await stripe.terminal.readers.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Terminal Reader": {
    "prefix": "StripeTerminalReaderRetrieve",
    "description": "Retrieve Terminal Reader",
    "body": "const reader = await stripe.terminal.readers.retrieve(\n  '${1:tmr_P400-123-456-789}'\n)"
  },
  "Update Terminal Reader": {
    "prefix": "StripeTerminalReaderUpdate",
    "description": "Update Terminal Reader",
    "body": "const reader = await stripe.terminal.readers.update(\n  '${1:tmr_P400-123-456-789}',\n  {label: '${2:Blue Rabbit}'}\n)"
  },
  "Create Token": {
    "prefix": "StripeTokenCreate",
    "description": "Create Token",
    "body": "const token = await stripe.tokens.create({\n  cvc_update: {cvc: '${1:123}'},\n})"
  },
  "Retrieve Token": {
    "prefix": "StripeTokenRetrieve",
    "description": "Retrieve Token",
    "body": "const token = await stripe.tokens.retrieve(\n  '${1:tok_xxxx}'\n)"
  },
  "Cancel Topup": {
    "prefix": "StripeTopupCancel",
    "description": "Cancel Topup",
    "body": "const topup = await stripe.topups.cancel(\n  '${1:tu_xxxxxxxxxxxxx}'\n)"
  },
  "Create Topup": {
    "prefix": "StripeTopupCreate",
    "description": "Create Topup",
    "body": "const topup = await stripe.topups.create({\n  amount: ${1:2000},\n  currency: '${2:usd}',\n  description: '${3:Top-up for Jenny Rosen}',\n  statement_descriptor: '${4:Top-up}',\n})"
  },
  "List Topup": {
    "prefix": "StripeTopupList",
    "description": "List Topup",
    "body": "const topups = await stripe.topups.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Topup": {
    "prefix": "StripeTopupRetrieve",
    "description": "Retrieve Topup",
    "body": "const topup = await stripe.topups.retrieve(\n  '${1:tu_xxxxxxxxxxxxx}'\n)"
  },
  "Update Topup": {
    "prefix": "StripeTopupUpdate",
    "description": "Update Topup",
    "body": "const topup = await stripe.topups.update(\n  '${1:tu_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Transfer": {
    "prefix": "StripeTransferCreate",
    "description": "Create Transfer",
    "body": "const transfer = await stripe.transfers.create({\n  amount: ${1:400},\n  currency: '${2:usd}',\n  destination: '${3:acct_xxxxxxxxxxxxx}',\n  transfer_group: '${4:ORDER_95}',\n})"
  },
  "List Transfer": {
    "prefix": "StripeTransferList",
    "description": "List Transfer",
    "body": "const transfers = await stripe.transfers.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Transfer": {
    "prefix": "StripeTransferRetrieve",
    "description": "Retrieve Transfer",
    "body": "const transfer = await stripe.transfers.retrieve(\n  '${1:tr_xxxxxxxxxxxxx}'\n)"
  },
  "Create Transfer Reversal": {
    "prefix": "StripeTransferReversalCreate",
    "description": "Create Transfer Reversal",
    "body": "const reversal = await stripe.transfers.createReversal(\n  '${1:tr_xxxxxxxxxxxxx}',\n  {amount: ${2:100}}\n)"
  },
  "List Transfer Reversal": {
    "prefix": "StripeTransferReversalList",
    "description": "List Transfer Reversal",
    "body": "const reversals = await stripe.transfers.listReversals(\n  '${1:tr_xxxxxxxxxxxxx}',\n  {limit: ${2:3}}\n)"
  },
  "Retrieve Transfer Reversal": {
    "prefix": "StripeTransferReversalRetrieve",
    "description": "Retrieve Transfer Reversal",
    "body": "const reversal = await stripe.transfers.retrieveReversal(\n  '${2:tr_xxxxxxxxxxxxx}',\n  '${1:trr_xxxxxxxxxxxxx}'\n)"
  },
  "Update Transfer Reversal": {
    "prefix": "StripeTransferReversalUpdate",
    "description": "Update Transfer Reversal",
    "body": "const reversal = await stripe.transfers.updateReversal(\n  '${2:tr_xxxxxxxxxxxxx}',\n  '${1:trr_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${3:6735}'}}\n)"
  },
  "Update Transfer": {
    "prefix": "StripeTransferUpdate",
    "description": "Update Transfer",
    "body": "const transfer = await stripe.transfers.update(\n  '${1:tr_xxxxxxxxxxxxx}',\n  {metadata: {order_id: '${2:6735}'}}\n)"
  },
  "Create Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointCreate",
    "description": "Create Webhook Endpoint",
    "body": "const webhookEndpoint = await stripe.webhookEndpoints.create({\n  url: '${1:https://example.com/my/webhook/endpoint}',\n  enabled_events: [\n    'charge.failed',\n    'charge.succeeded',\n  ],\n})"
  },
  "Delete Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointDelete",
    "description": "Delete Webhook Endpoint",
    "body": "const deleted = await stripe.webhookEndpoints.del(\n  '${1:we_xxxxxxxxxxxxx}'\n)"
  },
  "List Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointList",
    "description": "List Webhook Endpoint",
    "body": "const webhookEndpoints = await stripe.webhookEndpoints.list({\n  limit: ${1:3},\n})"
  },
  "Retrieve Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointRetrieve",
    "description": "Retrieve Webhook Endpoint",
    "body": "const webhookEndpoint = await stripe.webhookEndpoints.retrieve(\n  '${1:we_xxxxxxxxxxxxx}'\n)"
  },
  "Update Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointUpdate",
    "description": "Update Webhook Endpoint",
    "body": "const webhookEndpoint = await stripe.webhookEndpoints.update(\n  '${1:we_xxxxxxxxxxxxx}',\n  {url: '${2:https://example.com/new_endpoint}'}\n)"
  }
}
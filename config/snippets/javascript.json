{
  "Create Invoice": {
    "prefix": ["StripeInvoicesCreate"],
    "body": [
      "const invoiceItem = await stripe.invoiceItems.create({",
      "   customer: '${1:PAYMENT_METHOD_ID}',",
      "   amount: ${2:2500},",
      "   currency: '${3:usd}',",
      "   description: '${4:One-time setup fee}',",
      "});",
      "const invoice = await stripe.invoices.create({",
      "   customer: '${5:PAYMENT_METHOD_ID}',",
      "   auto_advance: true, // auto-finalize this draft after ~1 hour",
      "});",
      "$0"
    ],
    "description": "Create an Invoice"
  },
  "Create Customer": {
    "prefix": ["StripeCustomersCreate"],
    "body": [
      "// This creates a new Customer and attaches the PaymentMethod in one API call.",
      "const customer = await stripe.customers.create({",
      "   payment_method: '${1:PAYMENT_METHOD_ID}',",
      "   email: '${2:jenny.rosen@example.com}',",
      "   invoice_settings: {",
      "      default_payment_method: '${3:PAYMENT_METHOD_ID}',",
      "   },",
      "});",
      "$0"
    ],
    "description": "Create a Customer"
  },
  "Create Payment Intent": {
    "description": "Create a Payment Intent",
    "prefix": ["StripePaymentIntentsCreate"],
    "body": [
      "const paymentIntent = await stripe.paymentIntents.create({",
      "   amount: ${1:1099},",
      "   currency: '${2:usd}',",
      "});",
      "$0"
    ]
  },
  "Connect Direct Charge": {
    "prefix": ["StripePaymentIntentsCreateDirectCharge"],
    "body": [
      "stripe.paymentIntents.create({",
      "   payment_method_types: ['card'],",
      "   amount: ${1:1099},",
      "   currency: '${2:usd}',",
      "}, {",
      "   stripeAccount: '${3:CONNECTED_STRIPE_ACCOUNT_ID}',",
      "}).then(function(paymentIntent) {",
      "   // asynchronously called",
      "   $0",
      "});"
    ],
    "description": "Create a Direct Charge"
  },
  "Connect Direct Charge with fee": {
    "prefix": ["StripePaymentIntentsCreateDirectChargeWithFee"],
    "body": [
      "stripe.paymentIntents.create({",
      "   payment_method_types: ['card'],",
      "   amount: ${1:1099},",
      "   currency: '${2:usd}',",
      "   application_fee_amount: ${3:123},",
      "   transfer_data: {",
      "       destination: '${4:CONNECTED_STRIPE_ACCOUNT_ID}',",
      "   },",
      "}).then(function(paymentIntent) {",
      "   // asynchronously called",
      "   $0",
      "});"
    ],
    "description": "Create a Direct Charge with a fee"
  },
  "Create Connect Payout": {
    "prefix": ["StripePayoutsCreate"],
    "body": [
      "stripe.payouts.create({",
      "   amount: ${1:1099},",
      "   currency: '${2:usd}',",
      "}, {",
      "   stripe_account: '${3:CONNECTED_STRIPE_ACCOUNT_ID}',",
      "}).then(function(payout) {",
      "   // asynchronously called",
      "   $0",
      "});"
    ],
    "description": "Create a Connect Payout"
  },
  "Create Refund": {
    "prefix": ["StripeRefundsCreate"],
    "body": [
      "stripe.refunds.create({",
      "   charge: '${1:CHARGE_ID}',",
      "   reverse_transfer: true,",
      "}).then(function(refund) {",
      "   // asynchronously called",
      "   $0",
      "});"
    ],
    "description": "Create Refund"
  },
  "Elements: Create Payment Method (card)": {
    "prefix": ["StripeElementsPaymentMethodCreate"],
    "body": [
      "stripe.createPaymentMethod({",
      "   type: 'card',",
      "   card: cardElement,",
      "   billing_details: {",
      "       name: '${1:Jenny Rosen}',",
      "   },",
      "})",
      ".then(function(result) {",
      "   // Handle result.error or result.paymentMethod",
      "   $0",
      "});"
    ],
    "description": "Create a Payment Method with a card"
  },
  "Elements: Create Token for Card Element": {
    "prefix": ["StripeElementsCreateToken"],
    "body": [
      "stripe.createToken(cardElement).then(function(result) {",
      "   // Handle result.error or result.token",
      "});"
    ],
    "description": "Create a Token for Card Element"
  },
  "Create Checkout Session and Redirect": {
    "prefix": ["StripeCheckoutSessionsCreate"],
    "body": [
      "const session = await stripe.checkout.sessions.create({",
      "    payment_method_types: ['card'],",
      "    line_items: [{",
      "      name: '${1:T-shirt}',",
      "      description: '${2:Comfortable cotton t-shirt}',",
      "      images: ['${3:https://example.com/t-shirt.png}'],",
      "      amount: ${4:500},",
      "      currency: '${5:usd}',",
      "      quantity: ${6:1},",
      "    }],",
      "    success_url: '${7:https://example.com/success?session_id=CHECKOUT_SESSION_ID}',",
      "    cancel_url: '${8:https://example.com/cancel}',",
      "  });",
      "stripe.redirectToCheckout({",
      "    // Make the id field from the Checkout Session creation API response",
      "    // available to this file, so you can provide it as parameter here",
      "    // instead of the {{CHECKOUT_SESSION_ID}} placeholder.",
      "    sessionId: '${9:CHECKOUT_SESSION_ID}'",
      "  }).then(function (result) {",
      "    // If `redirectToCheckout` fails due to a browser or network",
      "    // error, display the localized error message to your customer",
      "    // using `result.error.message`.",
      "    $0",
      "  });"
    ],
    "description": "Create a new Checkout Session and Redirect to Stripe Checkout"
  },
  "Create Connect OAuth Authorize url": {
    "prefix": ["StripeConnectOAuthAuthorizeUrl"],
    "body": [
      "https://connect.stripe.com/oauth/authorize?response_type=code&client_id=${1:clientID}&scope=read_write&redirect_uri=${2:https://example.com}"
    ],
    "description": "Create a OAuth Authorize request for Stripe Connect"
  },
  "Create Connect OAuth Token request": {
    "prefix": ["StripeConnectOAuthToken"],
    "body": [
      "const response = await stripe.oauth.token({",
      "    grant_type: '${1:authorization_code}',",
      "    code: '${2:<oauth authorize code>}',",
      "});",
      "",
      "var connectedAccountId = response.stripe_user_id;"
    ],
    "description": "Exchange a oAuth Authorize code to Stripe User ID"
  },
  "Create Webhook Handler Endpoint": {
    "prefix": ["StripeWebhookEndpointHandler"],
    "body": [
      " /**",
      "  * This snippet assumes you are using Express.js.",
      "  * It uses the body-parser package, please make sure to import it.",
      "  * const bodyParser = require('body-parser');",
      "  */",
      "",
      " // If you are testing your webhook locally with the Stripe CLI you",
      " // can find the endpoint's secret by running `stripe listen`",
      " // Otherwise, find your endpoint's secret in your webhook settings in the Developer Dashboard",
      "const endpointSecret = '${1:<endpoint_secret>}';",
      "",
      "app.post('/${2:url}', bodyParser.raw({type: 'application/json'}), (request, response) => {",
      "  const sig = request.headers['stripe-signature'];",
      "  let event;",
      "",
      "  try {",
      "    event = stripe.webhooks.constructEvent(request.body, sig, endpointSecret);",
      "  } catch (err) {",
      "    response.status(400).send(`Webhook Error: ${err.message}`);",
      "  }",
      "",
      "  // Handle the event",
      "  switch (event.type) {",
      "    case '${4:event_name}':",
      "      const ${5:event_object} = event.data.object;",
      "      // Then define and call a method to handle the successful payment intent.",
      "      // handleEvent(event_object);",
      "      break;",
      "    case '${6:event_name}':",
      "      const ${7:event_object} = event.data.object;",
      "      // Then define and call a method to handle the successful payment intent.",
      "      // handleEvent(event_object);",
      "      break;",
      "    // ... handle other event types",
      "    default:",
      "      console.log(`Unhandled event type ${event.type}`);",
      "  }",
      "",
      "  // Return a response to acknowledge receipt of the event",
      "  response.json({received: true});",
      "});"
    ],
    "description": "Create a webhook event handler"
  }
}

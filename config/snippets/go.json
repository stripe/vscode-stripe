{
  "List Customer": {
    "prefix": "StripeCustomerList",
    "body": "params := &stripe.CustomerListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := customer.List(params)\nfor i.Next() {\n  c := i.Customer()\n}",
    "description": "List Customer"
  },
  "Retrieve Balance Transaction": {
    "prefix": "StripeBalanceTransactionRetrieve",
    "body": "bt, _ := balancetransaction.Get(\n  \"${1:txn_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Balance Transaction"
  },
  "List Balance Transaction": {
    "prefix": "StripeBalanceTransactionList",
    "body": "params := &stripe.BalanceTransactionListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := balancetransaction.List(params)\nfor i.Next() {\n  bt := i.BalanceTransaction()\n}",
    "description": "List Balance Transaction"
  },
  "Create Charge": {
    "prefix": "StripeChargeCreate",
    "body": "// `source` is obtained with Stripe.js; see https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token\nparams := &stripe.ChargeParams{\n  Amount: stripe.Int64(${1:2000}),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Description: stripe.String(\"${4:My First Test Charge (created for API docs)}\"),\n  Source: &stripe.SourceParams{Token: stripe.String(\"${3:tok_xxxx}\")},\n}\nc, _ := charge.New(params)",
    "description": "Create Charge"
  },
  "Retrieve Charge": {
    "prefix": "StripeChargeRetrieve",
    "body": "c, _ := charge.Get(\"${1:ch_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Charge"
  },
  "Update Charge": {
    "prefix": "StripeChargeUpdate",
    "body": "params := &stripe.ChargeParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nc, _ := charge.Update(\"${1:ch_xxxxxxxxxxxxx}\", params)",
    "description": "Update Charge"
  },
  "Capture Charge": {
    "prefix": "StripeChargeCapture",
    "body": "c, _ := charge.Capture(\"${1:ch_xxxxxxxxxxxxx}\", nil)",
    "description": "Capture Charge"
  },
  "List Charge": {
    "prefix": "StripeChargeList",
    "body": "params := &stripe.ChargeListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := charge.List(params)\nfor i.Next() {\n  c := i.Charge()\n}",
    "description": "List Charge"
  },
  "Create Customer": {
    "prefix": "StripeCustomerCreate",
    "body": "params := &stripe.CustomerParams{\n  Description: stripe.String(\"${1:My First Test Customer (created for API docs)}\"),\n}\nc, _ := customer.New(params)",
    "description": "Create Customer"
  },
  "Retrieve Customer": {
    "prefix": "StripeCustomerRetrieve",
    "body": "c, _ := customer.Get(\"${1:cus_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Customer"
  },
  "Update Customer": {
    "prefix": "StripeCustomerUpdate",
    "body": "params := &stripe.CustomerParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nc, _ := customer.Update(\n  \"${1:cus_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Customer"
  },
  "Delete Customer": {
    "prefix": "StripeCustomerDelete",
    "body": "c, _ := customer.Del(\"${1:cus_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Customer"
  },
  "Retrieve Dispute": {
    "prefix": "StripeDisputeRetrieve",
    "body": "d, _ := dispute.Get(\"${1:dp_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Dispute"
  },
  "Update Dispute": {
    "prefix": "StripeDisputeUpdate",
    "body": "params := &stripe.DisputeParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nd, _ := dispute.Update(\"${1:dp_xxxxxxxxxxxxx}\", params)",
    "description": "Update Dispute"
  },
  "Close Dispute": {
    "prefix": "StripeDisputeClose",
    "body": "d, _ := dispute.Close(\"${1:dp_xxxxxxxxxxxxx}\", nil)",
    "description": "Close Dispute"
  },
  "List Dispute": {
    "prefix": "StripeDisputeList",
    "body": "params := &stripe.DisputeListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := dispute.List(params)\nfor i.Next() {\n  d := i.Dispute()\n}",
    "description": "List Dispute"
  },
  "Retrieve Event": {
    "prefix": "StripeEventRetrieve",
    "body": "e, _ := event.Get(\"${1:evt_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Event"
  },
  "List Event": {
    "prefix": "StripeEventList",
    "body": "params := &stripe.EventListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := event.List(params)\nfor i.Next() {\n  e := i.Event()\n}",
    "description": "List Event"
  },
  "Create File": {
    "prefix": "StripeFileCreate",
    "body": "params := &stripe.FileParams{\n  File: stripe.String(\"${2:{a file descriptor}}\"),\n  Purpose: stripe.String(\"${1:dispute_xxxxxxxxxxxxx}\"),\n}\nf, _ := file.New(params)",
    "description": "Create File"
  },
  "Retrieve File": {
    "prefix": "StripeFileRetrieve",
    "body": "f, _ := file.Get(\"${1:file_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve File"
  },
  "List File": {
    "prefix": "StripeFileList",
    "body": "params := &stripe.FileListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := file.List(params)\nfor i.Next() {\n  f := i.File()\n}",
    "description": "List File"
  },
  "Create File Link": {
    "prefix": "StripeFileLinkCreate",
    "body": "params := &stripe.FileLinkParams{\n  File: stripe.String(\"${1:file_xxxxxxxxxxxxx}\"),\n}\nfl, _ := filelink.New(params)",
    "description": "Create File Link"
  },
  "Retrieve File Link": {
    "prefix": "StripeFileLinkRetrieve",
    "body": "fl, _ := filelink.Get(\"${1:link_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve File Link"
  },
  "Update File Link": {
    "prefix": "StripeFileLinkUpdate",
    "body": "params := &stripe.FileLinkParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nfl, _ := filelink.Update(\n  \"${1:link_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update File Link"
  },
  "List File Link": {
    "prefix": "StripeFileLinkList",
    "body": "params := &stripe.FileLinkListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := filelink.List(params)\nfor i.Next() {\n  fl := i.FileLink()\n}",
    "description": "List File Link"
  },
  "Retrieve Mandate": {
    "prefix": "StripeMandateRetrieve",
    "body": "m, _ := mandate.Get(\"${1:mandate_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Mandate"
  },
  "Create Payment Intent": {
    "prefix": "StripePaymentIntentCreate",
    "body": "params := &stripe.PaymentIntentParams{\n  Amount: stripe.Int64(${1:2000}),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  PaymentMethodTypes: []*string{\n    stripe.String(\"card\"),\n  },\n}\npi, _ := paymentintent.New(params)",
    "description": "Create Payment Intent"
  },
  "Retrieve Payment Intent": {
    "prefix": "StripePaymentIntentRetrieve",
    "body": "pi, _ := paymentintent.Get(\n  \"${1:pi_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Payment Intent"
  },
  "Update Payment Intent": {
    "prefix": "StripePaymentIntentUpdate",
    "body": "params := &stripe.PaymentIntentParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\npi, _ := paymentintent.Update(\n  \"${1:pi_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Payment Intent"
  },
  "Confirm Payment Intent": {
    "prefix": "StripePaymentIntentConfirm",
    "body": "// To create a PaymentIntent for confirmation, see our guide at: https://mock.stripe.com/docs/payments/payment-intents/creating-payment-intents#creating-for-automatic\nparams := &stripe.PaymentIntentConfirmParams{\n  PaymentMethod: stripe.String(\"${2:pm_card_visa}\"),\n}\npi, _ := paymentintent.Confirm(\n  \"${1:pi_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Confirm Payment Intent"
  },
  "Capture Payment Intent": {
    "prefix": "StripePaymentIntentCapture",
    "body": "// To create a requires_capture PaymentIntent, see our guide at: https://mock.stripe.com/docs/payments/capture-later\npi, _ := paymentintent.Capture(\n  \"${1:pi_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Capture Payment Intent"
  },
  "Cancel Payment Intent": {
    "prefix": "StripePaymentIntentCancel",
    "body": "// To create a PaymentIntent, see our guide at: https://mock.stripe.com/docs/payments/payment-intents/creating-payment-intents#creating-for-automatic\npi, _ := paymentintent.Cancel(\n  \"${1:pi_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Cancel Payment Intent"
  },
  "List Payment Intent": {
    "prefix": "StripePaymentIntentList",
    "body": "params := &stripe.PaymentIntentListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := paymentintent.List(params)\nfor i.Next() {\n  pi := i.PaymentIntent()\n}",
    "description": "List Payment Intent"
  },
  "Create Setup Intent": {
    "prefix": "StripeSetupIntentCreate",
    "body": "params := &stripe.SetupIntentParams{\n  PaymentMethodTypes: []*string{\n    stripe.String(\"card\"),\n  },\n}\nsi, _ := setupintent.New(params)",
    "description": "Create Setup Intent"
  },
  "Retrieve Setup Intent": {
    "prefix": "StripeSetupIntentRetrieve",
    "body": "si, _ := setupintent.Get(\n  \"${1:seti_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Setup Intent"
  },
  "Update Setup Intent": {
    "prefix": "StripeSetupIntentUpdate",
    "body": "params := &stripe.SetupIntentParams{}\nparams.AddMetadata(\"user_id\", \"${2:3435453}\")\nsi, _ := setupintent.Update(\n  \"${1:seti_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Setup Intent"
  },
  "Confirm Setup Intent": {
    "prefix": "StripeSetupIntentConfirm",
    "body": "params := &stripe.SetupIntentConfirmParams{\n  PaymentMethod: stripe.String(\"${2:pm_card_visa}\"),\n}\nsi, _ := setupintent.Confirm(\n  \"${1:seti_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Confirm Setup Intent"
  },
  "Cancel Setup Intent": {
    "prefix": "StripeSetupIntentCancel",
    "body": "si, _ := setupintent.Cancel(\n  \"${1:seti_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Cancel Setup Intent"
  },
  "List Setup Intent": {
    "prefix": "StripeSetupIntentList",
    "body": "params := &stripe.SetupIntentListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := setupintent.List(params)\nfor i.Next() {\n  si := i.SetupIntent()\n}",
    "description": "List Setup Intent"
  },
  "List Setup Attempt": {
    "prefix": "StripeSetupAttemptList",
    "body": "params := &stripe.SetupAttemptListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := setupattempt.List(params)\nfor i.Next() {\n  sa := i.SetupAttempt()\n}",
    "description": "List Setup Attempt"
  },
  "Create Payout": {
    "prefix": "StripePayoutCreate",
    "body": "params := &stripe.PayoutParams{\n  Amount: stripe.Int64(${1:1100}),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n}\np, _ := payout.New(params)",
    "description": "Create Payout"
  },
  "Retrieve Payout": {
    "prefix": "StripePayoutRetrieve",
    "body": "p, _ := payout.Get(\"${1:po_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Payout"
  },
  "Update Payout": {
    "prefix": "StripePayoutUpdate",
    "body": "params := &stripe.PayoutParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\np, _ := payout.Update(\"${1:po_xxxxxxxxxxxxx}\", params)",
    "description": "Update Payout"
  },
  "List Payout": {
    "prefix": "StripePayoutList",
    "body": "params := &stripe.PayoutListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := payout.List(params)\nfor i.Next() {\n  p := i.Payout()\n}",
    "description": "List Payout"
  },
  "Cancel Payout": {
    "prefix": "StripePayoutCancel",
    "body": "p, _ := payout.Cancel(\"${1:po_xxxxxxxxxxxxx}\", nil)",
    "description": "Cancel Payout"
  },
  "Reverse Payout": {
    "prefix": "StripePayoutReverse",
    "body": "p, _ := payout.Reverse(\"${1:po_xxxxxxxxxxxxx}\", nil)",
    "description": "Reverse Payout"
  },
  "Create Product": {
    "prefix": "StripeProductCreate",
    "body": "params := &stripe.ProductParams{\n  Name: stripe.String(\"${1:Gold Special}\"),\n}\np, _ := product.New(params)",
    "description": "Create Product"
  },
  "Retrieve Product": {
    "prefix": "StripeProductRetrieve",
    "body": "p, _ := product.Get(\"${1:prod_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Product"
  },
  "Update Product": {
    "prefix": "StripeProductUpdate",
    "body": "params := &stripe.ProductParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\np, _ := product.Update(\n  \"${1:prod_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Product"
  },
  "List Product": {
    "prefix": "StripeProductList",
    "body": "params := &stripe.ProductListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := product.List(params)\nfor i.Next() {\n  p := i.Product()\n}",
    "description": "List Product"
  },
  "Delete Product": {
    "prefix": "StripeProductDelete",
    "body": "p, _ := product.Del(\"${1:prod_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Product"
  },
  "Create Price": {
    "prefix": "StripePriceCreate",
    "body": "params := &stripe.PriceParams{\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Product: stripe.String(\"${4:prod_xxxxxxxxxxxxx}\"),\n  Recurring: &stripe.PriceRecurringParams{\n    Interval: stripe.String(\"${3:month}\"),\n  },\n  UnitAmount: stripe.Int64(${1:2000}),\n}\np, _ := price.New(params)",
    "description": "Create Price"
  },
  "Retrieve Price": {
    "prefix": "StripePriceRetrieve",
    "body": "p, _ := price.Get(\"${1:price_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Price"
  },
  "Update Price": {
    "prefix": "StripePriceUpdate",
    "body": "params := &stripe.PriceParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\np, _ := price.Update(\n  \"${1:price_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Price"
  },
  "List Price": {
    "prefix": "StripePriceList",
    "body": "params := &stripe.PriceListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := price.List(params)\nfor i.Next() {\n  p := i.Price()\n}",
    "description": "List Price"
  },
  "Create Refund": {
    "prefix": "StripeRefundCreate",
    "body": "params := &stripe.RefundParams{\n  Charge: stripe.String(\"${1:ch_xxxxxxxxxxxxx}\"),\n}\nr, _ := refund.New(params)",
    "description": "Create Refund"
  },
  "Retrieve Refund": {
    "prefix": "StripeRefundRetrieve",
    "body": "r, _ := refund.Get(\"${1:re_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Refund"
  },
  "Update Refund": {
    "prefix": "StripeRefundUpdate",
    "body": "params := &stripe.RefundParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nr, _ := refund.Update(\"${1:re_xxxxxxxxxxxxx}\", params)",
    "description": "Update Refund"
  },
  "List Refund": {
    "prefix": "StripeRefundList",
    "body": "params := &stripe.RefundListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := refund.List(params)\nfor i.Next() {\n  r := i.Refund()\n}",
    "description": "List Refund"
  },
  "Create Token": {
    "prefix": "StripeTokenCreate",
    "body": "params := &stripe.TokenParams{\n  CVCUpdate: &stripe.TokenCVCUpdateParams{\n    CVC: stripe.String(\"${1:123}\"),\n  },\n}\nt, _ := token.New(params)",
    "description": "Create Token"
  },
  "Retrieve Token": {
    "prefix": "StripeTokenRetrieve",
    "body": "t, _ := token.Get(\"${1:tok_xxxx}\", nil)",
    "description": "Retrieve Token"
  },
  "Create Payment Method": {
    "prefix": "StripePaymentMethodCreate",
    "body": "params := &stripe.PaymentMethodParams{\n  Card: &stripe.PaymentMethodCardParams{\n    Number: stripe.String(\"${2:4242424242424242}\"),\n    ExpMonth: stripe.String(\"${3:11}\"),\n    ExpYear: stripe.String(\"${4:2021}\"),\n    CVC: stripe.String(\"${5:314}\"),\n  },\n  Type: stripe.String(\"${1:card}\"),\n}\npm, _ := paymentmethod.New(params)",
    "description": "Create Payment Method"
  },
  "Retrieve Payment Method": {
    "prefix": "StripePaymentMethodRetrieve",
    "body": "pm, _ := paymentmethod.Get(\n  \"${1:pm_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Payment Method"
  },
  "Update Payment Method": {
    "prefix": "StripePaymentMethodUpdate",
    "body": "params := &stripe.PaymentMethodParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\npm, _ := paymentmethod.Update(\n  \"${1:pm_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Payment Method"
  },
  "List Payment Method": {
    "prefix": "StripePaymentMethodList",
    "body": "params := &stripe.PaymentMethodListParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Type: stripe.String(\"${2:card}\"),\n}\ni := paymentmethod.List(params)\nfor i.Next() {\n  pm := i.PaymentMethod()\n}",
    "description": "List Payment Method"
  },
  "Attach Payment Method": {
    "prefix": "StripePaymentMethodAttach",
    "body": "params := &stripe.PaymentMethodAttachParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\npm, _ := paymentmethod.Attach(\n  \"${1:pm_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Attach Payment Method"
  },
  "Detach Payment Method": {
    "prefix": "StripePaymentMethodDetach",
    "body": "pm, _ := paymentmethod.Detach(\n  \"${1:pm_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Detach Payment Method"
  },
  "Create Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountCreate",
    "body": "params := &stripe.BankAccountParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Source: &stripe.SourceParams{Token: stripe.String(\"${2:btok_xxxxxxxxxxxxx}\")},\n}\nba, _ := bankaccount.New(params)",
    "description": "Create Customer Bank Account"
  },
  "Retrieve Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountRetrieve",
    "body": "params := &stripe.BankAccountParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nba, _ := bankaccount.Get(\n  \"${1:ba_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Retrieve Customer Bank Account"
  },
  "Update Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountUpdate",
    "body": "params := &stripe.BankAccountParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nparams.AddMetadata(\"order_id\", \"${3:6735}\")\nba, _ := bankaccount.Update(\n  \"${1:ba_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Customer Bank Account"
  },
  "Verify Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountVerify",
    "body": "params := &stripe.BankAccountVerifyParams{\n  Amounts: []*int64{\n    stripe.Int64(32),\n    stripe.Int64(45),\n  },\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nba, _ := bankaccount.Verify(\n  \"${1:ba_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Verify Customer Bank Account"
  },
  "Delete Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountDelete",
    "body": "params := &stripe.BankAccountParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nba, _ := bankaccount.Del(\n  \"${1:ba_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Delete Customer Bank Account"
  },
  "List Customer Bank Account": {
    "prefix": "StripeCustomerBankAccountList",
    "body": "params := &stripe.BankAccountListParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Object: stripe.String(\"${2:bank_account}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := bankaccount.List(params)\nfor i.Next() {\n  ba := i.BankAccount()\n}",
    "description": "List Customer Bank Account"
  },
  "Create Customer Card": {
    "prefix": "StripeCustomerCardCreate",
    "body": "params := &stripe.CardParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Source: &stripe.SourceParams{Token: stripe.String(\"${2:tok_xxxx}\")},\n}\nc, _ := card.New(params)",
    "description": "Create Customer Card"
  },
  "Retrieve Customer Card": {
    "prefix": "StripeCustomerCardRetrieve",
    "body": "params := &stripe.CardParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nc, _ := card.Get(\"${1:card_xxxxxxxxxxxxx}\", params)",
    "description": "Retrieve Customer Card"
  },
  "Update Customer Card": {
    "prefix": "StripeCustomerCardUpdate",
    "body": "params := &stripe.CardParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n  Name: stripe.String(\"${3:Jenny Rosen}\"),\n}\nc, _ := card.Update(\"${1:card_xxxxxxxxxxxxx}\", params)",
    "description": "Update Customer Card"
  },
  "Delete Customer Card": {
    "prefix": "StripeCustomerCardDelete",
    "body": "params := &stripe.CardParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nc, _ := card.Del(\"${1:card_xxxxxxxxxxxxx}\", params)",
    "description": "Delete Customer Card"
  },
  "List Customer Card": {
    "prefix": "StripeCustomerCardList",
    "body": "params := &stripe.CardListParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Object: stripe.String(\"${2:card}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := card.List(params)\nfor i.Next() {\n  c := i.Card()\n}",
    "description": "List Customer Card"
  },
  "Retrieve Source": {
    "prefix": "StripeSourceRetrieve",
    "body": "s, _ := source.Get(\"${1:src_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Source"
  },
  "Update Source": {
    "prefix": "StripeSourceUpdate",
    "body": "params := &stripe.SourceObjectParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\ns, _ := source.Update(\"${1:src_xxxxxxxxxxxxx}\", params)",
    "description": "Update Source"
  },
  "Create Checkout Session": {
    "prefix": "StripeCheckoutSessionCreate",
    "body": "params := &stripe.CheckoutSessionParams{\n  CancelURL: stripe.String(\"${2:https://example.com/cancel}\"),\n  LineItems: []*stripe.CheckoutSessionLineItemParams{\n    {\n      Price: stripe.String(\"price_xxxxxxxxxxxxx\"),\n      Quantity: stripe.Int64(2),\n    },\n  },\n  Mode: stripe.String(\"${6:payment}\"),\n  PaymentMethodTypes: []*string{\n    stripe.String(\"card\"),\n  },\n  SuccessURL: stripe.String(\"${1:https://example.com/success}\"),\n}\ns, _ := session.New(params)",
    "description": "Create Checkout Session"
  },
  "Retrieve Checkout Session": {
    "prefix": "StripeCheckoutSessionRetrieve",
    "body": "s, _ := session.Get(\"${1:cs_test_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Checkout Session"
  },
  "List Checkout Session": {
    "prefix": "StripeCheckoutSessionList",
    "body": "params := &stripe.CheckoutSessionListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := session.List(params)\nfor i.Next() {\n  s := i.CheckoutSession()\n}",
    "description": "List Checkout Session"
  },
  "Create Coupon": {
    "prefix": "StripeCouponCreate",
    "body": "params := &stripe.CouponParams{\n  Duration: stripe.String(\"${2:repeating}\"),\n  DurationInMonths: stripe.Int64(${3:3}),\n  PercentOff: stripe.Float64(${1:25}),\n}\nc, _ := coupon.New(params)",
    "description": "Create Coupon"
  },
  "Retrieve Coupon": {
    "prefix": "StripeCouponRetrieve",
    "body": "c, _ := coupon.Get(\"${1:25_5OFF}\", nil)",
    "description": "Retrieve Coupon"
  },
  "Update Coupon": {
    "prefix": "StripeCouponUpdate",
    "body": "params := &stripe.CouponParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nc, _ := coupon.Update(\"${1:co_xxxxxxxxxxxxx}\", params)",
    "description": "Update Coupon"
  },
  "Delete Coupon": {
    "prefix": "StripeCouponDelete",
    "body": "c, _ := coupon.Del(\"${1:co_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Coupon"
  },
  "List Coupon": {
    "prefix": "StripeCouponList",
    "body": "params := &stripe.CouponListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := coupon.List(params)\nfor i.Next() {\n  c := i.Coupon()\n}",
    "description": "List Coupon"
  },
  "Preview Credit Note": {
    "prefix": "StripeCreditNotePreview",
    "body": "params := &stripe.CreditNotePreviewParams{\n  Invoice: stripe.String(\"${1:in_xxxxxxxxxxxxx}\"),\n  Lines: []*stripe.CreditNoteLineParams{\n    {\n      Type: stripe.String(\"invoice_line_item\"),\n      InvoiceLineItem: stripe.String(\"il_xxxxxxxxxxxxx\"),\n      Quantity: stripe.Int64(1),\n    },\n  },\n}\ncn, _ := creditnote.Preview(params)",
    "description": "Preview Credit Note"
  },
  "Create Credit Note": {
    "prefix": "StripeCreditNoteCreate",
    "body": "params := &stripe.CreditNoteParams{\n  Invoice: stripe.String(\"${1:in_xxxxxxxxxxxxx}\"),\n  Lines: []*stripe.CreditNoteLineParams{\n    {\n      Type: stripe.String(\"invoice_line_item\"),\n      InvoiceLineItem: stripe.String(\"il_xxxxxxxxxxxxx\"),\n      Quantity: stripe.Int64(1),\n    },\n  },\n}\ncn, _ := creditnote.New(params)",
    "description": "Create Credit Note"
  },
  "Retrieve Credit Note": {
    "prefix": "StripeCreditNoteRetrieve",
    "body": "cn, _ := creditnote.Get(\"${1:cn_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Credit Note"
  },
  "Update Credit Note": {
    "prefix": "StripeCreditNoteUpdate",
    "body": "params := &stripe.CreditNoteParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\ncn, _ := creditnote.Update(\n  \"${1:cn_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Credit Note"
  },
  "List Credit Note Line Item": {
    "prefix": "StripeCreditNoteLineItemList",
    "body": "params := &stripe.LineItemListParams{\n  CreditNote: stripe.String(\"${1:cn_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := lineitem.List(params)\nfor i.Next() {\n  li := i.LineItem()\n}",
    "description": "List Credit Note Line Item"
  },
  "List Credit Note Credit Note Line Item": {
    "prefix": "StripeCreditNoteCreditNoteLineItemList",
    "body": "params := &stripe.CreditNoteLineItemListParams{\n  Invoice: stripe.String(\"${1:in_xxxxxxxxxxxxx}\"),\n  Lines: []*stripe.CreditNoteCreditNoteLineItemLineParams{\n    {\n      Type: stripe.String(\"invoice_line_item\"),\n      InvoiceLineItem: stripe.String(\"il_xxxxxxxxxxxxx\"),\n      Quantity: stripe.Int64(1),\n    },\n  },\n}\ni := creditnotelineitem.List(params)\nfor i.Next() {\n  cnli := i.CreditNoteLineItem()\n}",
    "description": "List Credit Note Credit Note Line Item"
  },
  "Void Credit Note Credit Note": {
    "prefix": "StripeCreditNoteVoidCreditNote",
    "body": "cn, _ := creditnote.VoidCreditNote(\n  \"${1:cn_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Void Credit Note Credit Note"
  },
  "List Credit Note": {
    "prefix": "StripeCreditNoteList",
    "body": "params := &stripe.CreditNoteListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := creditnote.List(params)\nfor i.Next() {\n  cn := i.CreditNote()\n}",
    "description": "List Credit Note"
  },
  "Create Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionCreate",
    "body": "params := &stripe.\n  CustomerBalanceTransactionParams{\n  Amount: stripe.Int64(${2:-500}),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n}\nbt, _ := customerbalancetransaction.New(params)",
    "description": "Create Customer Balance Transaction"
  },
  "Retrieve Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionRetrieve",
    "body": "params := &stripe.\n  CustomerBalanceTransactionParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nbt, _ := customerbalancetransaction.Get(\n  \"${1:cbtxn_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Retrieve Customer Balance Transaction"
  },
  "Update Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionUpdate",
    "body": "params := &stripe.\n  CustomerBalanceTransactionParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nparams.AddMetadata(\"order_id\", \"${3:6735}\")\nbt, _ := customerbalancetransaction.Update(\n  \"${1:cbtxn_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Customer Balance Transaction"
  },
  "List Customer Balance Transaction": {
    "prefix": "StripeCustomerBalanceTransactionList",
    "body": "params := &stripe.\n  CustomerBalanceTransactionListParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := customerbalancetransaction.List(params)\nfor i.Next() {\n  bt := i.BalanceTransaction()\n}",
    "description": "List Customer Balance Transaction"
  },
  "Create Billing Portal Session": {
    "prefix": "StripeBillingPortalSessionCreate",
    "body": "params := &stripe.BillingPortalSessionParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  ReturnURL: stripe.String(\"${2:https://example.com/account}\"),\n}\ns, _ := session.New(params)",
    "description": "Create Billing Portal Session"
  },
  "Create Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdCreate",
    "body": "params := &stripe.TaxIDParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Type: stripe.String(\"${2:eu_vat}\"),\n  Value: stripe.String(\"${3:DE123456789}\"),\n}\nti, _ := taxid.New(params)",
    "description": "Create Customer Tax Id"
  },
  "Retrieve Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdRetrieve",
    "body": "params := &stripe.TaxIDParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nti, _ := taxid.Get(\"${1:txi_xxxxxxxxxxxxx}\", params)",
    "description": "Retrieve Customer Tax Id"
  },
  "Delete Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdDelete",
    "body": "params := &stripe.TaxIDParams{\n  Customer: stripe.String(\"${2:cus_xxxxxxxxxxxxx}\"),\n}\nti, _ := taxid.Del(\"${1:txi_xxxxxxxxxxxxx}\", params)",
    "description": "Delete Customer Tax Id"
  },
  "List Customer Tax Id": {
    "prefix": "StripeCustomerTaxIdList",
    "body": "params := &stripe.TaxIDListParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := taxid.List(params)\nfor i.Next() {\n  ti := i.TaxID()\n}",
    "description": "List Customer Tax Id"
  },
  "Create Invoice": {
    "prefix": "StripeInvoiceCreate",
    "body": "params := &stripe.InvoiceParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n}\nin, _ := invoice.New(params)",
    "description": "Create Invoice"
  },
  "Retrieve Invoice": {
    "prefix": "StripeInvoiceRetrieve",
    "body": "in, _ := invoice.Get(\"${1:in_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Invoice"
  },
  "Update Invoice": {
    "prefix": "StripeInvoiceUpdate",
    "body": "params := &stripe.InvoiceParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nin, _ := invoice.Update(\n  \"${1:in_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Invoice"
  },
  "Delete Invoice": {
    "prefix": "StripeInvoiceDelete",
    "body": "in, _ := invoice.Del(\"${1:in_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Invoice"
  },
  "Finalize Invoice Invoice": {
    "prefix": "StripeInvoiceFinalizeInvoice",
    "body": "in, _ := invoice.FinalizeInvoice(\n  \"${1:in_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Finalize Invoice Invoice"
  },
  "Pay Invoice": {
    "prefix": "StripeInvoicePay",
    "body": "in, _ := invoice.Pay(\"${1:in_xxxxxxxxxxxxx}\", nil)",
    "description": "Pay Invoice"
  },
  "Send Invoice Invoice": {
    "prefix": "StripeInvoiceSendInvoice",
    "body": "in, _ := invoice.SendInvoice(\n  \"${1:in_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Send Invoice Invoice"
  },
  "Void Invoice Invoice": {
    "prefix": "StripeInvoiceVoidInvoice",
    "body": "in, _ := invoice.VoidInvoice(\n  \"${1:in_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Void Invoice Invoice"
  },
  "Mark Uncollectible Invoice": {
    "prefix": "StripeInvoiceMarkUncollectible",
    "body": "in, _ := invoice.MarkUncollectible(\n  \"${1:in_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Mark Uncollectible Invoice"
  },
  "List Invoice": {
    "prefix": "StripeInvoiceList",
    "body": "params := &stripe.InvoiceListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := invoice.List(params)\nfor i.Next() {\n  in := i.Invoice()\n}",
    "description": "List Invoice"
  },
  "Create Invoice Item": {
    "prefix": "StripeInvoiceItemCreate",
    "body": "params := &stripe.InvoiceItemParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Price: stripe.String(\"${2:price_xxxxxxxxxxxxx}\"),\n}\nii, _ := invoiceitem.New(params)",
    "description": "Create Invoice Item"
  },
  "Retrieve Invoice Item": {
    "prefix": "StripeInvoiceItemRetrieve",
    "body": "ii, _ := invoiceitem.Get(\"${1:ii_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Invoice Item"
  },
  "Update Invoice Item": {
    "prefix": "StripeInvoiceItemUpdate",
    "body": "params := &stripe.InvoiceItemParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nii, _ := invoiceitem.Update(\n  \"${1:ii_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Invoice Item"
  },
  "Delete Invoice Item": {
    "prefix": "StripeInvoiceItemDelete",
    "body": "ii, _ := invoiceitem.Del(\"${1:ii_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Invoice Item"
  },
  "List Invoice Item": {
    "prefix": "StripeInvoiceItemList",
    "body": "params := &stripe.InvoiceItemListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := invoiceitem.List(params)\nfor i.Next() {\n  ii := i.InvoiceItem()\n}",
    "description": "List Invoice Item"
  },
  "Create Plan": {
    "prefix": "StripePlanCreate",
    "body": "params := &stripe.PlanParams{\n  Amount: stripe.Int64(${1:2000}),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Interval: stripe.String(\"${3:month}\"),\n  Product: stripe.String(\"${4:prod_xxxxxxxxxxxxx}\"),\n}\np, _ := plan.New(params)",
    "description": "Create Plan"
  },
  "Retrieve Plan": {
    "prefix": "StripePlanRetrieve",
    "body": "p, _ := plan.Get(\"${1:price_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Plan"
  },
  "Update Plan": {
    "prefix": "StripePlanUpdate",
    "body": "params := &stripe.PlanParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\np, _ := plan.Update(\"${1:price_xxxxxxxxxxxxx}\", params)",
    "description": "Update Plan"
  },
  "Delete Plan": {
    "prefix": "StripePlanDelete",
    "body": "p, _ := plan.Del(\"${1:price_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Plan"
  },
  "List Plan": {
    "prefix": "StripePlanList",
    "body": "params := &stripe.PlanListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := plan.List(params)\nfor i.Next() {\n  p := i.Plan()\n}",
    "description": "List Plan"
  },
  "Create Promotion Code": {
    "prefix": "StripePromotionCodeCreate",
    "body": "params := &stripe.PromotionCodeParams{\n  Coupon: stripe.String(\"${1:25_5OFF}\"),\n}\npc, _ := promotioncode.New(params)",
    "description": "Create Promotion Code"
  },
  "Update Promotion Code": {
    "prefix": "StripePromotionCodeUpdate",
    "body": "params := &stripe.PromotionCodeParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\npc, _ := promotioncode.Update(\n  \"${1:promo_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Promotion Code"
  },
  "Retrieve Promotion Code": {
    "prefix": "StripePromotionCodeRetrieve",
    "body": "pc, _ := promotioncode.Get(\n  \"${1:promo_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Promotion Code"
  },
  "List Promotion Code": {
    "prefix": "StripePromotionCodeList",
    "body": "params := &stripe.PromotionCodeListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := promotioncode.List(params)\nfor i.Next() {\n  pc := i.PromotionCode()\n}",
    "description": "List Promotion Code"
  },
  "Create Subscription": {
    "prefix": "StripeSubscriptionCreate",
    "body": "params := &stripe.SubscriptionParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  Items: []*stripe.SubscriptionItemParams{\n    {Price: stripe.String(\"price_xxxxxxxxxxxxx\")},\n  },\n}\ns, _ := sub.New(params)",
    "description": "Create Subscription"
  },
  "Retrieve Subscription": {
    "prefix": "StripeSubscriptionRetrieve",
    "body": "s, _ := sub.Get(\"${1:sub_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Subscription"
  },
  "Update Subscription": {
    "prefix": "StripeSubscriptionUpdate",
    "body": "params := &stripe.SubscriptionParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\ns, _ := sub.Update(\"${1:sub_xxxxxxxxxxxxx}\", params)",
    "description": "Update Subscription"
  },
  "Delete Subscription": {
    "prefix": "StripeSubscriptionDelete",
    "body": "s, _ := sub.Cancel(\"${1:sub_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Subscription"
  },
  "List Subscription": {
    "prefix": "StripeSubscriptionList",
    "body": "params := &stripe.SubscriptionListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := sub.List(params)\nfor i.Next() {\n  s := i.Subscription()\n}",
    "description": "List Subscription"
  },
  "Create Subscription Item": {
    "prefix": "StripeSubscriptionItemCreate",
    "body": "params := &stripe.SubscriptionItemParams{\n  Price: stripe.String(\"${2:price_xxxxxxxxxxxxx}\"),\n  Quantity: stripe.Int64(${3:2}),\n  Subscription: stripe.String(\"${1:sub_xxxxxxxxxxxxx}\"),\n}\nsi, _ := subitem.New(params)",
    "description": "Create Subscription Item"
  },
  "Retrieve Subscription Item": {
    "prefix": "StripeSubscriptionItemRetrieve",
    "body": "si, _ := subitem.Get(\"${1:si_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Subscription Item"
  },
  "Update Subscription Item": {
    "prefix": "StripeSubscriptionItemUpdate",
    "body": "params := &stripe.SubscriptionItemParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nsi, _ := subitem.Update(\n  \"${1:si_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Subscription Item"
  },
  "Delete Subscription Item": {
    "prefix": "StripeSubscriptionItemDelete",
    "body": "si, _ := subitem.Del(\"${1:si_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Subscription Item"
  },
  "List Subscription Item": {
    "prefix": "StripeSubscriptionItemList",
    "body": "params := &stripe.SubscriptionItemListParams{\n  Subscription: stripe.String(\"${1:sub_xxxxxxxxxxxxx}\"),\n}\ni := subitem.List(params)\nfor i.Next() {\n  si := i.SubscriptionItem()\n}",
    "description": "List Subscription Item"
  },
  "Create Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleCreate",
    "body": "params := &stripe.SubscriptionScheduleParams{\n  Customer: stripe.String(\"${1:cus_xxxxxxxxxxxxx}\"),\n  EndBehavior: stripe.String(\"${3:release}\"),\n  Phases: []*stripe.SubscriptionSchedulePhaseParams{\n    {\n      Items: []*stripe.SubscriptionSchedulePhaseItemParams{\n        {\n          Price: stripe.String(\"price_xxxxxxxxxxxxx\"),\n          Quantity: stripe.Int64(1),\n        },\n      },\n      Iterations: stripe.Int64(12),\n    },\n  },\n  StartDate: stripe.Int64(${2:1605558431}),\n}\nss, _ := subschedule.New(params)",
    "description": "Create Subscription Schedule"
  },
  "Retrieve Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleRetrieve",
    "body": "ss, _ := subschedule.Get(\n  \"${1:sub_sched_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Subscription Schedule"
  },
  "Update Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleUpdate",
    "body": "params := &stripe.SubscriptionScheduleParams{\n  EndBehavior: stripe.String(\"${2:release}\"),\n}\nss, _ := subschedule.Update(\n  \"${1:sub_sched_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Subscription Schedule"
  },
  "Cancel Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleCancel",
    "body": "ss, _ := subschedule.Cancel(\n  \"${1:sub_sched_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Cancel Subscription Schedule"
  },
  "Release Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleRelease",
    "body": "ss, _ := subschedule.Release(\n  \"${1:sub_sched_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Release Subscription Schedule"
  },
  "List Subscription Schedule": {
    "prefix": "StripeSubscriptionScheduleList",
    "body": "params := &stripe.SubscriptionScheduleListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := subschedule.List(params)\nfor i.Next() {\n  ss := i.SubscriptionSchedule()\n}",
    "description": "List Subscription Schedule"
  },
  "Create Tax Rate": {
    "prefix": "StripeTaxRateCreate",
    "body": "params := &stripe.TaxRateParams{\n  Description: stripe.String(\"${2:VAT Germany}\"),\n  DisplayName: stripe.String(\"${1:VAT}\"),\n  Inclusive: stripe.Bool(${5:false}),\n  Jurisdiction: stripe.String(\"${3:DE}\"),\n  Percentage: stripe.Int64(${4:16}),\n}\ntr, _ := taxrate.New(params)",
    "description": "Create Tax Rate"
  },
  "Retrieve Tax Rate": {
    "prefix": "StripeTaxRateRetrieve",
    "body": "tr, _ := taxrate.Get(\"${1:txr_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Tax Rate"
  },
  "Update Tax Rate": {
    "prefix": "StripeTaxRateUpdate",
    "body": "params := &stripe.TaxRateParams{\n  Active: stripe.Bool(${2:false}),\n}\ntr, _ := taxrate.Update(\n  \"${1:txr_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Tax Rate"
  },
  "List Tax Rate": {
    "prefix": "StripeTaxRateList",
    "body": "params := &stripe.TaxRateListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := taxrate.List(params)\nfor i.Next() {\n  tr := i.TaxRate()\n}",
    "description": "List Tax Rate"
  },
  "Create Subscription Item Usage Record": {
    "prefix": "StripeSubscriptionItemUsageRecordCreate",
    "body": "params := &stripe.UsageRecordParams{\n  Quantity: stripe.Int64(${2:100}),\n  SubscriptionItem: stripe.String(\"${1:si_xxxxxxxxxxxxx}\"),\n  Timestamp: stripe.Int64(${3:1571252444}),\n}\nur, _ := usagerecord.New(params)",
    "description": "Create Subscription Item Usage Record"
  },
  "List Subscription Item Usage Record Summary": {
    "prefix": "StripeSubscriptionItemUsageRecordSummaryList",
    "body": "params := &stripe.UsageRecordSummaryListParams{\n  SubscriptionItem: stripe.String(\"${1:si_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := usagerecordsummary.List(params)\nfor i.Next() {\n  urs := i.UsageRecordSummary()\n}",
    "description": "List Subscription Item Usage Record Summary"
  },
  "Create Account": {
    "prefix": "StripeAccountCreate",
    "body": "params := &stripe.AccountParams{\n  Capabilities: &stripe.AccountCapabilitiesParams{\n    CardPayments: &stripe.AccountCapabilitiesCardPaymentsParams{\n      Requested: stripe.Bool(${4:${5:true}}),\n    },\n    Transfers: &stripe.AccountCapabilitiesTransfersParams{\n      Requested: stripe.Bool(true),\n    },\n  },\n  Country: stripe.String(\"${2:US}\"),\n  Email: stripe.String(\"${3:jenny.rosen@example.com}\"),\n  Type: stripe.String(\"${1:custom}\"),\n}\na, _ := account.New(params)",
    "description": "Create Account"
  },
  "Retrieve Account": {
    "prefix": "StripeAccountRetrieve",
    "body": "a, _ := account.GetByID(\"${1:acct_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Account"
  },
  "Update Account": {
    "prefix": "StripeAccountUpdate",
    "body": "params := &stripe.AccountParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\na, _ := account.Update(\n  \"${1:acct_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Account"
  },
  "Delete Account": {
    "prefix": "StripeAccountDelete",
    "body": "a, _ := account.Del(\"${1:acct_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Account"
  },
  "Reject Account": {
    "prefix": "StripeAccountReject",
    "body": "params := &stripe.AccountRejectParams{\n  Reason: stripe.String(\"${2:fraud}\"),\n}\na, _ := account.Reject(\n  \"${1:acct_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Reject Account"
  },
  "List Account": {
    "prefix": "StripeAccountList",
    "body": "params := &stripe.AccountListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := account.List(params)\nfor i.Next() {\n  a := i.Account()\n}",
    "description": "List Account"
  },
  "Create Account Login Link": {
    "prefix": "StripeAccountLoginLinkCreate",
    "body": "params := &stripe.LoginLinkParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n}\nll, _ := loginlink.New(params)",
    "description": "Create Account Login Link"
  },
  "Create Account Link": {
    "prefix": "StripeAccountLinkCreate",
    "body": "params := &stripe.AccountLinkParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n  RefreshURL: stripe.String(\"${2:https://example.com/reauth}\"),\n  ReturnURL: stripe.String(\"${3:https://example.com/return}\"),\n  Type: stripe.String(\"${4:account_onboarding}\"),\n}\nal, _ := accountlink.New(params)",
    "description": "Create Account Link"
  },
  "Retrieve Application Fee": {
    "prefix": "StripeApplicationFeeRetrieve",
    "body": "f, _ := fee.Get(\"${1:fee_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Application Fee"
  },
  "List Application Fee": {
    "prefix": "StripeApplicationFeeList",
    "body": "params := &stripe.ApplicationFeeListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := fee.List(params)\nfor i.Next() {\n  f := i.ApplicationFee()\n}",
    "description": "List Application Fee"
  },
  "Create Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundCreate",
    "body": "params := &stripe.FeeRefundParams{\n  ApplicationFee: stripe.String(\"${1:fee_xxxxxxxxxxxxx}\"),\n}\nfr, _ := feerefund.New(params)",
    "description": "Create Application Fee Fee Refund"
  },
  "Retrieve Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundRetrieve",
    "body": "params := &stripe.FeeRefundParams{\n  ApplicationFee: stripe.String(\"${2:fee_xxxxxxxxxxxxx}\"),\n}\nfr, _ := feerefund.Get(\"${1:fr_xxxxxxxxxxxxx}\", params)",
    "description": "Retrieve Application Fee Fee Refund"
  },
  "Update Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundUpdate",
    "body": "params := &stripe.FeeRefundParams{\n  ApplicationFee: stripe.String(\"${2:fee_xxxxxxxxxxxxx}\"),\n}\nparams.AddMetadata(\"order_id\", \"${3:6735}\")\nfr, _ := feerefund.Update(\n  \"${1:fr_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Application Fee Fee Refund"
  },
  "List Application Fee Fee Refund": {
    "prefix": "StripeApplicationFeeFeeRefundList",
    "body": "params := &stripe.FeeRefundListParams{\n  ApplicationFee: stripe.String(\"${1:fee_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := feerefund.List(params)\nfor i.Next() {\n  fr := i.FeeRefund()\n}",
    "description": "List Application Fee Fee Refund"
  },
  "Retrieve Account Capability": {
    "prefix": "StripeAccountCapabilityRetrieve",
    "body": "params := &stripe.CapabilityParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nc, _ := capability.Get(\"${1:card_payments}\", params)",
    "description": "Retrieve Account Capability"
  },
  "Update Account Capability": {
    "prefix": "StripeAccountCapabilityUpdate",
    "body": "params := &stripe.CapabilityParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n  Requested: stripe.Bool(${3:true}),\n}\nc, _ := capability.Update(\"${1:card_payments}\", params)",
    "description": "Update Account Capability"
  },
  "List Account Capability": {
    "prefix": "StripeAccountCapabilityList",
    "body": "params := &stripe.CapabilityListParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n}\ni := capability.List(params)\nfor i.Next() {\n  c := i.Capability()\n}",
    "description": "List Account Capability"
  },
  "List Country Spec": {
    "prefix": "StripeCountrySpecList",
    "body": "params := &stripe.CountrySpecListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := countryspec.List(params)\nfor i.Next() {\n  cs := i.CountrySpec()\n}",
    "description": "List Country Spec"
  },
  "Retrieve Country Spec": {
    "prefix": "StripeCountrySpecRetrieve",
    "body": "cs, _ := countryspec.Get(\"${1:US}\", nil)",
    "description": "Retrieve Country Spec"
  },
  "Create Account Account Bank Account": {
    "prefix": "StripeAccountAccountBankAccountCreate",
    "body": "params := &stripe.BankAccountParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n  Token: stripe.String(\"btok_xxxxxxxxxxxxx\"),\n}\nba, _ := bankaccount.New(params)",
    "description": "Create Account Account Bank Account"
  },
  "Retrieve Account Account Bank Account": {
    "prefix": "StripeAccountAccountBankAccountRetrieve",
    "body": "params := &stripe.BankAccountParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nba, _ := bankaccount.Get(\n  \"${1:ba_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Retrieve Account Account Bank Account"
  },
  "Update Account Account Bank Account": {
    "prefix": "StripeAccountAccountBankAccountUpdate",
    "body": "params := &stripe.BankAccountParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nparams.AddMetadata(\"order_id\", \"${3:6735}\")\nba, _ := bankaccount.Update(\n  \"${1:ba_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Account Account Bank Account"
  },
  "Delete Account Account Bank Account": {
    "prefix": "StripeAccountAccountBankAccountDelete",
    "body": "params := &stripe.BankAccountParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nba, _ := bankaccount.Del(\n  \"${1:ba_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Delete Account Account Bank Account"
  },
  "List Account Account Bank Account": {
    "prefix": "StripeAccountAccountBankAccountList",
    "body": "params := &stripe.BankAccountListParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n  Object: stripe.String(\"${2:bank_account}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := bankaccount.List(params)\nfor i.Next() {\n  ba := i.BankAccount()\n}",
    "description": "List Account Account Bank Account"
  },
  "Create Account Account Card": {
    "prefix": "StripeAccountAccountCardCreate",
    "body": "params := &stripe.CardParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n  Token: stripe.String(\"tok_xxxx_debit\"),\n}\nc, _ := card.New(params)",
    "description": "Create Account Account Card"
  },
  "Retrieve Account Account Card": {
    "prefix": "StripeAccountAccountCardRetrieve",
    "body": "params := &stripe.CardParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nc, _ := card.Get(\"${1:card_xxxxxxxxxxxxx}\", params)",
    "description": "Retrieve Account Account Card"
  },
  "Update Account Account Card": {
    "prefix": "StripeAccountAccountCardUpdate",
    "body": "params := &stripe.CardParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nparams.AddMetadata(\"order_id\", \"${3:6735}\")\nc, _ := card.Update(\"${1:card_xxxxxxxxxxxxx}\", params)",
    "description": "Update Account Account Card"
  },
  "Delete Account Account Card": {
    "prefix": "StripeAccountAccountCardDelete",
    "body": "params := &stripe.CardParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nc, _ := card.Del(\"${1:card_xxxxxxxxxxxxx}\", params)",
    "description": "Delete Account Account Card"
  },
  "List Account Account Card": {
    "prefix": "StripeAccountAccountCardList",
    "body": "params := &stripe.CardListParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n  Object: stripe.String(\"${2:card}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := card.List(params)\nfor i.Next() {\n  c := i.Card()\n}",
    "description": "List Account Account Card"
  },
  "Create Account Person": {
    "prefix": "StripeAccountPersonCreate",
    "body": "params := &stripe.PersonParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n  FirstName: stripe.String(\"${2:Jane}\"),\n  LastName: stripe.String(\"${3:Diaz}\"),\n}\np, _ := person.New(params)",
    "description": "Create Account Person"
  },
  "Retrieve Account Person": {
    "prefix": "StripeAccountPersonRetrieve",
    "body": "params := &stripe.PersonParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\np, _ := person.Get(\"${1:person_xxxxxxxxxxxxx}\", params)",
    "description": "Retrieve Account Person"
  },
  "Update Account Person": {
    "prefix": "StripeAccountPersonUpdate",
    "body": "params := &stripe.PersonParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\nparams.AddMetadata(\"order_id\", \"${3:6735}\")\np, _ := person.Update(\n  \"${1:person_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Account Person"
  },
  "Delete Account Person": {
    "prefix": "StripeAccountPersonDelete",
    "body": "params := &stripe.PersonParams{\n  Account: stripe.String(\"${2:acct_xxxxxxxxxxxxx}\"),\n}\np, _ := person.Del(\"${1:person_xxxxxxxxxxxxx}\", params)",
    "description": "Delete Account Person"
  },
  "List Account Person": {
    "prefix": "StripeAccountPersonList",
    "body": "params := &stripe.PersonListParams{\n  Account: stripe.String(\"${1:acct_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := person.List(params)\nfor i.Next() {\n  p := i.Person()\n}",
    "description": "List Account Person"
  },
  "Create Topup": {
    "prefix": "StripeTopupCreate",
    "body": "params := &stripe.TopupParams{\n  Amount: stripe.Int64(${1:2000}),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Description: stripe.String(\"${3:Top-up for Jenny Rosen}\"),\n  StatementDescriptor: stripe.String(\"${4:Top-up}\"),\n}\nt, _ := topup.New(params)",
    "description": "Create Topup"
  },
  "Retrieve Topup": {
    "prefix": "StripeTopupRetrieve",
    "body": "t, _ := topup.Get(\"${1:tu_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Topup"
  },
  "Update Topup": {
    "prefix": "StripeTopupUpdate",
    "body": "params := &stripe.TopupParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nt, _ := topup.Update(\"${1:tu_xxxxxxxxxxxxx}\", params)",
    "description": "Update Topup"
  },
  "List Topup": {
    "prefix": "StripeTopupList",
    "body": "params := &stripe.TopupListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := topup.List(params)\nfor i.Next() {\n  t := i.Topup()\n}",
    "description": "List Topup"
  },
  "Cancel Topup": {
    "prefix": "StripeTopupCancel",
    "body": "t, _ := topup.Cancel(\"${1:tu_xxxxxxxxxxxxx}\", nil)",
    "description": "Cancel Topup"
  },
  "Create Transfer": {
    "prefix": "StripeTransferCreate",
    "body": "params := &stripe.TransferParams{\n  Amount: stripe.Int64(${1:400}),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Destination: stripe.String(\"${3:acct_xxxxxxxxxxxxx}\"),\n  TransferGroup: stripe.String(\"${4:ORDER_95}\"),\n}\nt, _ := transfer.New(params)",
    "description": "Create Transfer"
  },
  "Retrieve Transfer": {
    "prefix": "StripeTransferRetrieve",
    "body": "t, _ := transfer.Get(\"${1:tr_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Transfer"
  },
  "Update Transfer": {
    "prefix": "StripeTransferUpdate",
    "body": "params := &stripe.TransferParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nt, _ := transfer.Update(\n  \"${1:tr_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Transfer"
  },
  "List Transfer": {
    "prefix": "StripeTransferList",
    "body": "params := &stripe.TransferListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := transfer.List(params)\nfor i.Next() {\n  t := i.Transfer()\n}",
    "description": "List Transfer"
  },
  "Create Transfer Reversal": {
    "prefix": "StripeTransferReversalCreate",
    "body": "params := &stripe.ReversalParams{\n  Amount: stripe.Int64(${2:100}),\n  Transfer: stripe.String(\"${1:tr_xxxxxxxxxxxxx}\"),\n}\nr, _ := reversal.New(params)",
    "description": "Create Transfer Reversal"
  },
  "Retrieve Transfer Reversal": {
    "prefix": "StripeTransferReversalRetrieve",
    "body": "params := &stripe.ReversalParams{\n  Transfer: stripe.String(\"${2:tr_xxxxxxxxxxxxx}\"),\n}\nr, _ := reversal.Get(\"${1:trr_xxxxxxxxxxxxx}\", params)",
    "description": "Retrieve Transfer Reversal"
  },
  "Update Transfer Reversal": {
    "prefix": "StripeTransferReversalUpdate",
    "body": "params := &stripe.ReversalParams{\n  Transfer: stripe.String(\"${2:tr_xxxxxxxxxxxxx}\"),\n}\nparams.AddMetadata(\"order_id\", \"${3:6735}\")\nr, _ := reversal.Update(\n  \"${1:trr_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Transfer Reversal"
  },
  "List Transfer Reversal": {
    "prefix": "StripeTransferReversalList",
    "body": "params := &stripe.ReversalListParams{\n  Transfer: stripe.String(\"${1:tr_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := reversal.List(params)\nfor i.Next() {\n  r := i.Reversal()\n}",
    "description": "List Transfer Reversal"
  },
  "Retrieve Radar Early Fraud Warning": {
    "prefix": "StripeRadarEarlyFraudWarningRetrieve",
    "body": "efw, _ := earlyfraudwarning.Get(\n  \"${1:issfr_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Radar Early Fraud Warning"
  },
  "List Radar Early Fraud Warning": {
    "prefix": "StripeRadarEarlyFraudWarningList",
    "body": "params := &stripe.\n  RadarEarlyFraudWarningListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := earlyfraudwarning.List(params)\nfor i.Next() {\n  efw := i.RadarEarlyFraudWarning()\n}",
    "description": "List Radar Early Fraud Warning"
  },
  "Approve Review": {
    "prefix": "StripeReviewApprove",
    "body": "r, _ := review.Approve(\"${1:prv_xxxxxxxxxxxxx}\", nil)",
    "description": "Approve Review"
  },
  "Retrieve Review": {
    "prefix": "StripeReviewRetrieve",
    "body": "r, _ := review.Get(\"${1:prv_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Review"
  },
  "List Review": {
    "prefix": "StripeReviewList",
    "body": "params := &stripe.ReviewListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := review.List(params)\nfor i.Next() {\n  r := i.Review()\n}",
    "description": "List Review"
  },
  "Create Radar Value List": {
    "prefix": "StripeRadarValueListCreate",
    "body": "params := &stripe.RadarValueListParams{\n  Alias: stripe.String(\"${1:custom_ip_xxxxxxxxxxxxx}\"),\n  ItemType: stripe.String(\"${3:ip_address}\"),\n  Name: stripe.String(\"${2:Custom IP Blocklist}\"),\n}\nvl, _ := valuelist.New(params)",
    "description": "Create Radar Value List"
  },
  "Retrieve Radar Value List": {
    "prefix": "StripeRadarValueListRetrieve",
    "body": "vl, _ := valuelist.Get(\"${1:rsl_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Radar Value List"
  },
  "Update Radar Value List": {
    "prefix": "StripeRadarValueListUpdate",
    "body": "params := &stripe.RadarValueListParams{\n  Name: stripe.String(\"${2:Updated IP Block List}\"),\n}\nvl, _ := valuelist.Update(\n  \"${1:rsl_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Radar Value List"
  },
  "Delete Radar Value List": {
    "prefix": "StripeRadarValueListDelete",
    "body": "vl, _ := valuelist.Del(\"${1:rsl_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Radar Value List"
  },
  "List Radar Value List": {
    "prefix": "StripeRadarValueListList",
    "body": "params := &stripe.RadarValueListListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := valuelist.List(params)\nfor i.Next() {\n  vl := i.RadarValueList()\n}",
    "description": "List Radar Value List"
  },
  "Create Radar Value List Item": {
    "prefix": "StripeRadarValueListItemCreate",
    "body": "params := &stripe.RadarValueListItemParams{\n  Value: stripe.String(\"${2:1.2.3.4}\"),\n  RadarValueList: stripe.String(\"${1:rsl_xxxxxxxxxxxxx}\"),\n}\nvli, _ := valuelistitem.New(params)",
    "description": "Create Radar Value List Item"
  },
  "Retrieve Radar Value List Item": {
    "prefix": "StripeRadarValueListItemRetrieve",
    "body": "vli, _ := valuelistitem.Get(\n  \"${1:rsli_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Radar Value List Item"
  },
  "Delete Radar Value List Item": {
    "prefix": "StripeRadarValueListItemDelete",
    "body": "vli, _ := valuelistitem.Del(\n  \"${1:rsli_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Delete Radar Value List Item"
  },
  "List Radar Value List Item": {
    "prefix": "StripeRadarValueListItemList",
    "body": "params := &stripe.RadarValueListItemListParams{\n  RadarValueList: stripe.String(\"${2:rsl_xxxxxxxxxxxxx}\"),\n}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := valuelistitem.List(params)\nfor i.Next() {\n  vli := i.RadarValueListItem()\n}",
    "description": "List Radar Value List Item"
  },
  "Retrieve Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationRetrieve",
    "body": "a, _ := authorization.Get(\n  \"${1:iauth_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Issuing Authorization"
  },
  "Update Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationUpdate",
    "body": "params := &stripe.IssuingAuthorizationParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\na, _ := authorization.Update(\n  \"${1:iauth_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Issuing Authorization"
  },
  "Approve Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationApprove",
    "body": "a, _ := authorization.Approve(\n  \"${1:iauth_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Approve Issuing Authorization"
  },
  "Decline Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationDecline",
    "body": "a, _ := authorization.Decline(\n  \"${1:iauth_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Decline Issuing Authorization"
  },
  "List Issuing Authorization": {
    "prefix": "StripeIssuingAuthorizationList",
    "body": "params := &stripe.IssuingAuthorizationListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := authorization.List(params)\nfor i.Next() {\n  a := i.IssuingAuthorization()\n}",
    "description": "List Issuing Authorization"
  },
  "Create Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderCreate",
    "body": "params := &stripe.IssuingCardholderParams{\n  Billing: &stripe.IssuingBillingParams{\n    Address: &stripe.AddressParams{\n      Line1: stripe.String(\"${5:1234 Main Street}\"),\n      City: stripe.String(\"${6:San Francisco}\"),\n      State: stripe.String(\"${7:CA}\"),\n      Country: stripe.String(\"${8:US}\"),\n      PostalCode: stripe.String(\"${9:94111}\"),\n    },\n  },\n  Email: stripe.String(\"${3:jenny.rosen@example.com}\"),\n  Name: stripe.String(\"${2:Jenny Rosen}\"),\n  PhoneNumber: stripe.String(\"${4:+18888675309}\"),\n  Type: stripe.String(\"${1:individual}\"),\n}\nc, _ := cardholder.New(params)",
    "description": "Create Issuing Cardholder"
  },
  "Retrieve Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderRetrieve",
    "body": "c, _ := cardholder.Get(\"${1:ich_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Issuing Cardholder"
  },
  "Update Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderUpdate",
    "body": "params := &stripe.IssuingCardholderParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nc, _ := cardholder.Update(\n  \"${1:ich_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Issuing Cardholder"
  },
  "List Issuing Cardholder": {
    "prefix": "StripeIssuingCardholderList",
    "body": "params := &stripe.IssuingCardholderListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := cardholder.List(params)\nfor i.Next() {\n  c := i.IssuingCardholder()\n}",
    "description": "List Issuing Cardholder"
  },
  "Create Issuing Card": {
    "prefix": "StripeIssuingCardCreate",
    "body": "params := &stripe.IssuingCardParams{\n  Cardholder: stripe.String(\"${1:ich_xxxxxxxxxxxxx}\"),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Type: stripe.String(\"${3:virtual}\"),\n}\nc, _ := card.New(params)",
    "description": "Create Issuing Card"
  },
  "Retrieve Issuing Card": {
    "prefix": "StripeIssuingCardRetrieve",
    "body": "c, _ := card.Get(\"${1:ic_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Issuing Card"
  },
  "Update Issuing Card": {
    "prefix": "StripeIssuingCardUpdate",
    "body": "params := &stripe.IssuingCardParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nc, _ := card.Update(\"${1:ic_xxxxxxxxxxxxx}\", params)",
    "description": "Update Issuing Card"
  },
  "List Issuing Card": {
    "prefix": "StripeIssuingCardList",
    "body": "params := &stripe.IssuingCardListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := card.List(params)\nfor i.Next() {\n  c := i.IssuingCard()\n}",
    "description": "List Issuing Card"
  },
  "Create Issuing Dispute": {
    "prefix": "StripeIssuingDisputeCreate",
    "body": "params := &stripe.IssuingDisputeParams{\n  Evidence: &stripe.IssuingDisputeEvidenceParams{\n    Reason: stripe.String(\"${2:fraudulent}\"),\n    Fraudulent: &stripe.IssuingDisputeEvidenceFraudulentParams{\n      Explanation: stripe.String(\"${3:Purchase was unrecognized.}\"),\n    },\n  },\n  Transaction: stripe.String(\"${1:ipi_xxxxxxxxxxxxx}\"),\n}\nd, _ := dispute.New(params)",
    "description": "Create Issuing Dispute"
  },
  "Submit Issuing Dispute": {
    "prefix": "StripeIssuingDisputeSubmit",
    "body": "d, _ := dispute.Submit(\"${1:idp_xxxxxxxxxxxxx}\", nil)",
    "description": "Submit Issuing Dispute"
  },
  "Retrieve Issuing Dispute": {
    "prefix": "StripeIssuingDisputeRetrieve",
    "body": "d, _ := dispute.Get(\"${1:idp_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Issuing Dispute"
  },
  "Update Issuing Dispute": {
    "prefix": "StripeIssuingDisputeUpdate",
    "body": "params := &stripe.IssuingDisputeParams{\n  Evidence: &stripe.IssuingDisputeEvidenceParams{\n    Reason: stripe.String(\"${2:not_xxxxxxxxxxxxx}\"),\n    NotReceived: &stripe.IssuingDisputeEvidenceNotReceivedParams{\n      ExpectedAt: stripe.Int64(${3:1590000000}),\n      Explanation${4:}: stripe.String(\"\"),\n      ProductDescription: stripe.String(\"${5:Baseball cap}\"),\n      ProductType: stripe.String(\"${6:merchandise}\"),\n    },\n  },\n}\nd, _ := dispute.Update(\n  \"${1:idp_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Issuing Dispute"
  },
  "List Issuing Dispute": {
    "prefix": "StripeIssuingDisputeList",
    "body": "params := &stripe.IssuingDisputeListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := dispute.List(params)\nfor i.Next() {\n  d := i.IssuingDispute()\n}",
    "description": "List Issuing Dispute"
  },
  "Retrieve Issuing Transaction": {
    "prefix": "StripeIssuingTransactionRetrieve",
    "body": "t, _ := transaction.Get(\"${1:ipi_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Issuing Transaction"
  },
  "Update Issuing Transaction": {
    "prefix": "StripeIssuingTransactionUpdate",
    "body": "params := &stripe.IssuingTransactionParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\nt, _ := transaction.Update(\n  \"${1:ipi_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Issuing Transaction"
  },
  "List Issuing Transaction": {
    "prefix": "StripeIssuingTransactionList",
    "body": "params := &stripe.IssuingTransactionListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := transaction.List(params)\nfor i.Next() {\n  t := i.IssuingTransaction()\n}",
    "description": "List Issuing Transaction"
  },
  "Create Terminal Connection Token": {
    "prefix": "StripeTerminalConnectionTokenCreate",
    "body": "ct, _ := connectiontoken.New(nil)",
    "description": "Create Terminal Connection Token"
  },
  "Create Terminal Location": {
    "prefix": "StripeTerminalLocationCreate",
    "body": "params := &stripe.TerminalLocationParams{\n  Address: &stripe.AccountAddressParams{\n    Line1: stripe.String(\"${2:1234 Main Street}\"),\n    City: stripe.String(\"${3:San Francisco}\"),\n    Country: stripe.String(\"${4:US}\"),\n    PostalCode: stripe.String(\"${5:94111}\"),\n  },\n  DisplayName: stripe.String(\"${1:My First Store}\"),\n}\nl, _ := location.New(params)",
    "description": "Create Terminal Location"
  },
  "Retrieve Terminal Location": {
    "prefix": "StripeTerminalLocationRetrieve",
    "body": "l, _ := location.Get(\"${1:tml_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Terminal Location"
  },
  "Update Terminal Location": {
    "prefix": "StripeTerminalLocationUpdate",
    "body": "params := &stripe.TerminalLocationParams{\n  DisplayName: stripe.String(\"${2:My First Store}\"),\n}\nl, _ := location.Update(\n  \"${1:tml_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Terminal Location"
  },
  "Delete Terminal Location": {
    "prefix": "StripeTerminalLocationDelete",
    "body": "l, _ := location.Del(\"${1:tml_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Terminal Location"
  },
  "List Terminal Location": {
    "prefix": "StripeTerminalLocationList",
    "body": "params := &stripe.TerminalLocationListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := location.List(params)\nfor i.Next() {\n  l := i.TerminalLocation()\n}",
    "description": "List Terminal Location"
  },
  "Create Terminal Reader": {
    "prefix": "StripeTerminalReaderCreate",
    "body": "params := &stripe.TerminalReaderParams{\n  Label: stripe.String(\"${2:Blue Rabbit}\"),\n  Location: stripe.String(\"${3:tml_1234}\"),\n  RegistrationCode: stripe.String(\"${1:puppies-plug-could}\"),\n}\nr, _ := reader.New(params)",
    "description": "Create Terminal Reader"
  },
  "Retrieve Terminal Reader": {
    "prefix": "StripeTerminalReaderRetrieve",
    "body": "r, _ := reader.Get(\"${1:tmr_P400-123-456-789}\", nil)",
    "description": "Retrieve Terminal Reader"
  },
  "Update Terminal Reader": {
    "prefix": "StripeTerminalReaderUpdate",
    "body": "params := &stripe.TerminalReaderParams{\n  Label: stripe.String(\"${2:Blue Rabbit}\"),\n}\nr, _ := reader.Update(\n  \"${1:tmr_P400-123-456-789}\",\n  params,\n)",
    "description": "Update Terminal Reader"
  },
  "Delete Terminal Reader": {
    "prefix": "StripeTerminalReaderDelete",
    "body": "r, _ := reader.Del(\"${1:tmr_P400-123-456-789}\", nil)",
    "description": "Delete Terminal Reader"
  },
  "List Terminal Reader": {
    "prefix": "StripeTerminalReaderList",
    "body": "params := &stripe.TerminalReaderListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := reader.List(params)\nfor i.Next() {\n  r := i.TerminalReader()\n}",
    "description": "List Terminal Reader"
  },
  "Create Order": {
    "prefix": "StripeOrderCreate",
    "body": "params := &stripe.OrderParams{\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Email: stripe.String(\"${2:jenny.rosen@example.com}\"),\n  Items: []*stripe.OrderItemParams{\n    {\n      Type: stripe.String(\"sku\"),\n      Parent: stripe.String(\"sku_xxxxxxxxxxxxx\"),\n    },\n  },\n  Shipping: &stripe.OrderShippingParams{\n    Name: stripe.String(\"${5:Jenny Rosen}\"),\n    Address: &stripe.AddressParams{\n      Line1: stripe.String(\"${6:1234 Main Street}\"),\n      City: stripe.String(\"${7:San Francisco}\"),\n      State: stripe.String(\"${8:CA}\"),\n      Country: stripe.String(\"${9:US}\"),\n      PostalCode: stripe.String(\"${10:94111}\"),\n    },\n  },\n}\no, _ := order.New(params)",
    "description": "Create Order"
  },
  "Retrieve Order": {
    "prefix": "StripeOrderRetrieve",
    "body": "o, _ := order.Get(\"${1:or_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Order"
  },
  "Update Order": {
    "prefix": "StripeOrderUpdate",
    "body": "params := &stripe.OrderUpdateParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\no, _ := order.Update(\"${1:or_xxxxxxxxxxxxx}\", params)",
    "description": "Update Order"
  },
  "Pay Order": {
    "prefix": "StripeOrderPay",
    "body": "params := &stripe.OrderPayParams{\n  Source: &stripe.SourceParams{Token: stripe.String(\"${2:tok_xxxx}\")},\n}\no, _ := order.Pay(\"${1:or_xxxxxxxxxxxxx}\", params)",
    "description": "Pay Order"
  },
  "List Order": {
    "prefix": "StripeOrderList",
    "body": "params := &stripe.OrderListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := order.List(params)\nfor i.Next() {\n  o := i.Order()\n}",
    "description": "List Order"
  },
  "Retrieve Order Return": {
    "prefix": "StripeOrderReturnRetrieve",
    "body": "or, _ := orderreturn.Get(\n  \"${1:orret_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Order Return"
  },
  "List Order Return": {
    "prefix": "StripeOrderReturnList",
    "body": "params := &stripe.OrderReturnListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := orderreturn.List(params)\nfor i.Next() {\n  or := i.OrderReturn()\n}",
    "description": "List Order Return"
  },
  "Create Sku": {
    "prefix": "StripeSkuCreate",
    "body": "params := &stripe.SKUParams{\n  Attributes: &stripe.SKUAttributesParams{\n    Size: stripe.String(\"${1:Medium}\"),\n    Gender: stripe.String(\"${2:Unisex}\"),\n  },\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n  Inventory: &stripe.SKUInventoryParams{\n    Type: stripe.String(\"${5:finite}\"),\n    Quantity: stripe.Int64(${6:500}),\n  },\n  Price: stripe.Int64(${3:1500}),\n  Product: stripe.String(\"${7:prod_xxxxxxxxxxxxx}\"),\n}\ns, _ := sku.New(params)",
    "description": "Create Sku"
  },
  "Retrieve Sku": {
    "prefix": "StripeSkuRetrieve",
    "body": "s, _ := sku.Get(\"${1:sku_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Sku"
  },
  "Update Sku": {
    "prefix": "StripeSkuUpdate",
    "body": "params := &stripe.SKUParams{}\nparams.AddMetadata(\"order_id\", \"${2:6735}\")\ns, _ := sku.Update(\"${1:sku_xxxxxxxxxxxxx}\", params)",
    "description": "Update Sku"
  },
  "List Sku": {
    "prefix": "StripeSkuList",
    "body": "params := &stripe.SKUListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := sku.List(params)\nfor i.Next() {\n  s := i.SKU()\n}",
    "description": "List Sku"
  },
  "Delete Sku": {
    "prefix": "StripeSkuDelete",
    "body": "s, _ := sku.Del(\"${1:sku_xxxxxxxxxxxxx}\", nil)",
    "description": "Delete Sku"
  },
  "Retrieve Sigma Scheduled Query Run": {
    "prefix": "StripeSigmaScheduledQueryRunRetrieve",
    "body": "sqr, _ := scheduledqueryrun.Get(\n  \"${1:sqr_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Sigma Scheduled Query Run"
  },
  "List Sigma Scheduled Query Run": {
    "prefix": "StripeSigmaScheduledQueryRunList",
    "body": "params := &stripe.\n  SigmaScheduledQueryRunListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := scheduledqueryrun.List(params)\nfor i.Next() {\n  sqr := i.SigmaScheduledQueryRun()\n}",
    "description": "List Sigma Scheduled Query Run"
  },
  "Create Reporting Report Run": {
    "prefix": "StripeReportingReportRunCreate",
    "body": "params := &stripe.ReportingReportRunParams{\n  Parameters: &stripe.ReportingReportRunParametersParams{\n    IntervalStart: stripe.Int64(${2:1522540800}),\n    IntervalEnd: stripe.Int64(${3:1525132800}),\n  },\n  ReportType: stripe.String(\"${1:balance.summary.1}\"),\n}\nrr, _ := reportrun.New(params)",
    "description": "Create Reporting Report Run"
  },
  "Retrieve Reporting Report Run": {
    "prefix": "StripeReportingReportRunRetrieve",
    "body": "rr, _ := reportrun.Get(\"${1:frr_xxxxxxxxxxxxx}\", nil)",
    "description": "Retrieve Reporting Report Run"
  },
  "List Reporting Report Run": {
    "prefix": "StripeReportingReportRunList",
    "body": "params := &stripe.ReportingReportRunListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := reportrun.List(params)\nfor i.Next() {\n  rr := i.ReportingReportRun()\n}",
    "description": "List Reporting Report Run"
  },
  "Retrieve Reporting Report Type": {
    "prefix": "StripeReportingReportTypeRetrieve",
    "body": "rt, _ := reporttype.Get(\"${1:balance.summary.1}\", nil)",
    "description": "Retrieve Reporting Report Type"
  },
  "List Reporting Report Type": {
    "prefix": "StripeReportingReportTypeList",
    "body": "i := reporttype.List(nil)\nfor i.Next() {\n  rt := i.ReportingReportType()\n}",
    "description": "List Reporting Report Type"
  },
  "Create Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointCreate",
    "body": "params := &stripe.WebhookEndpointParams{\n  EnabledEvents: []*string{\n    stripe.String(\"charge.failed\"),\n    stripe.String(\"charge.succeeded\"),\n  },\n  URL: stripe.String(\"${1:https://example.com/my/webhook/endpoint}\"),\n}\nwe, _ := webhookendpoint.New(params)",
    "description": "Create Webhook Endpoint"
  },
  "Retrieve Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointRetrieve",
    "body": "we, _ := webhookendpoint.Get(\n  \"${1:we_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Retrieve Webhook Endpoint"
  },
  "Update Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointUpdate",
    "body": "params := &stripe.WebhookEndpointParams{\n  URL: stripe.String(\"${2:https://example.com/new_endpoint}\"),\n}\nwe, _ := webhookendpoint.Update(\n  \"${1:we_xxxxxxxxxxxxx}\",\n  params,\n)",
    "description": "Update Webhook Endpoint"
  },
  "List Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointList",
    "body": "params := &stripe.WebhookEndpointListParams{}\nparams.Filters.AddFilter(\"limit\", \"\", \"3\")\ni := webhookendpoint.List(params)\nfor i.Next() {\n  we := i.WebhookEndpoint()\n}",
    "description": "List Webhook Endpoint"
  },
  "Delete Webhook Endpoint": {
    "prefix": "StripeWebhookEndpointDelete",
    "body": "we, _ := webhookendpoint.Del(\n  \"${1:we_xxxxxxxxxxxxx}\",\n  nil,\n)",
    "description": "Delete Webhook Endpoint"
  }
}